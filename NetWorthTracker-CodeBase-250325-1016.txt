Projects/
└── NetWorthTracker-VibeCoding/
    ├── css/
    │   ├── normalize.css
    │   ├── section-isolation.css
    │   ├── styles.css
    │   └── ui-fixes.css
    ├── js/
    │   ├── modules/
    │   │   ├── dashboardUI.js
    │   │   ├── dataService.js
    │   │   ├── financialTablesUI.js
    │   │   ├── formHandlerUI.js
    │   │   ├── milestonesUI.js
    │   │   ├── salaryTrackerUI.js
    │   │   ├── utils.js
    │   │   └── yearManagerUI.js
    │   ├── app-initializer.js
    │   ├── app.js
    │   ├── chartManager.js
    │   ├── dataStore.js
    │   ├── direct-ui.js
    │   ├── import-export.js
    │   ├── main.js
    │   ├── modal-fix.js
    │   ├── modalManager.js
    │   ├── module-test.js
    │   ├── navigation-fix.js
    │   ├── page-fixer.js
    │   ├── uiController.js
    │   └── utils.js
    ├── index.html
    └── README.md

----- normalize.css -----
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */

/* Document
   ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */

html {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/* Sections
   ========================================================================== */

/**
 * Remove the margin in all browsers.
 */

body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */

main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */

/**
 * Remove the gray background on active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove the border on images inside links in IE 10.
 */

img {
  border-style: none;
}

/* Forms
   ========================================================================== */

/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input { /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select { /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */

button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */

textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */

/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */

details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
  display: list-item;
}

/* Misc
   ========================================================================== */

/**
 * Add the correct display in IE 10+.
 */

template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */

[hidden] {
  display: none;
} 

----- section-isolation.css -----
/* Section Isolation CSS 
   This file adds strong isolation between sections to prevent layout issues */

/* Ensure main container has proper layout */
main {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
}

/* Force section isolation with strong containment */
section {
    contain: content; /* Strong isolation for performance */
    isolation: isolate; /* Creates a new stacking context */
    position: relative;
    width: 100%;
    margin-bottom: 2rem;
    padding: 1.5rem;
    border-radius: 6px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Strong visibility controls that override any other styles */
.hidden-section {
    display: none !important;
    visibility: hidden !important;
    position: absolute !important;
    opacity: 0 !important;
    clip: rect(0, 0, 0, 0) !important;
    clip-path: inset(50%) !important;
    height: 0 !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    border: 0 !important;
    padding: 0 !important;
    margin: 0 !important;
    pointer-events: none !important;
    z-index: -1 !important;
}

/* Active section - ensure full visibility */
.active-section {
    display: block !important;
    visibility: visible !important;
    position: relative !important;
    opacity: 1 !important;
    clip: auto !important;
    clip-path: none !important;
    height: auto !important;
    overflow: visible !important;
    white-space: normal !important;
    pointer-events: auto !important;
    z-index: 1 !important;
}

/* Make active navigation links more prominent */
#main-nav a.active {
    background-color: #3a7bd5;
    color: white;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    font-weight: bold;
}

/* Modal styles that override section isolation */
#modal-container {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    background-color: rgba(0, 0, 0, 0.5) !important;
    z-index: 10000 !important; /* Very high z-index to be above everything */
}

#modal-container.modal-visible {
    display: flex !important;
    visibility: visible !important;
    opacity: 1 !important;
    justify-content: center !important;
    align-items: center !important;
    pointer-events: auto !important;
}

#modal-container.modal-hidden {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
    pointer-events: none !important;
}

.modal-content {
    background-color: white !important;
    border-radius: 6px !important;
    padding: 2rem !important;
    max-width: 500px !important;
    width: 90% !important;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;
    position: relative !important;
    opacity: 1 !important;
    visibility: visible !important;
    overflow: visible !important;
} 

----- styles.css -----
/* Global Styles */
:root {
    --primary-color: #3a7bd5;
    --primary-light: #6fa4ff;
    --primary-dark: #0051a2;
    --secondary-color: #00d1b2;
    --text-color: #333;
    --text-light: #666;
    --text-dark: #111;
    --bg-color: #f9f9f9;
    --card-bg: #fff;
    --border-color: #e0e0e0;
    --danger-color: #ff3860;
    --success-color: #23d160;
    --warning-color: #ffdd57;
    --radius: 6px;
    --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    --transition: all 0.3s ease;
}

* {
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: var(--text-color);
    background-color: var(--bg-color);
    line-height: 1.6;
    padding: 0;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
    margin-top: 0;
    color: var(--text-dark);
    font-weight: 600;
}

a {
    color: var(--primary-color);
    text-decoration: none;
    transition: var(--transition);
}

a:hover {
    color: var(--primary-dark);
}

/* Layout */
header {
    background-color: var(--card-bg);
    box-shadow: var(--shadow);
    padding: 1rem 2rem;
    position: sticky;
    top: 0;
    z-index: 100;
}

header h1 {
    margin: 0;
    font-size: 1.5rem;
}

main {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    /* Ensure main takes up enough height for sections to be visible */
    min-height: 90vh;
}

section {
    margin-bottom: 2rem;
    position: relative; /* Ensure position context for absolute positioning */
    min-height: 75vh; /* Make sections take up most of the viewport height */
    background-color: var(--card-bg);
    padding: 1.5rem;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    transition: opacity 0.3s ease, transform 0.3s ease;
}

/* Dashboard section specific color */
#dashboard {
}

/* Assets-liabilities section specific color */
#assets-liabilities {
}

/* Trends section specific color */
#trends {
}

/* Goals section specific color */
#goals {
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Section indicator */
section::before {
    display: none;
}

/* Strong visibility controls for sections */
.hidden-section {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
    transform: translateY(20px) !important;
    height: 0 !important;
    overflow: hidden !important;
    pointer-events: none !important;
}

.active-section {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    transform: translateY(0) !important;
    height: auto !important;
    overflow: visible !important;
    pointer-events: auto !important;
}

/* Navigation */
#main-nav ul {
    list-style: none;
    padding: 0;
    margin: 1rem 0 0;
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
}

#main-nav li {
    margin: 0;
}

#main-nav a {
    padding: 0.5rem 1rem;
    border-radius: var(--radius);
    color: var(--text-color);
    font-weight: 500;
}

#main-nav a:hover {
    background-color: rgba(0, 0, 0, 0.05);
}

#main-nav a.active {
    background-color: var(--primary-color);
    color: white;
}

/* Cards */
.summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.card {
    background-color: var(--card-bg);
    border-radius: var(--radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
}

.card h3 {
    margin-top: 0;
    font-size: 1rem;
    color: var(--text-light);
    margin-bottom: 0.5rem;
}

.card .value {
    font-size: 1.75rem;
    font-weight: 600;
    margin: 0.5rem 0;
    color: var(--text-dark);
}

.card .change {
    font-size: 0.9rem;
    color: var(--success-color);
}

.progress-bar {
    height: 8px;
    background-color: rgba(0, 0, 0, 0.1);
    border-radius: 4px;
    overflow: hidden;
    margin-top: 0.5rem;
}

.progress {
    height: 100%;
    background-color: var(--primary-color);
}

/* Charts */
.charts-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.chart-wrapper {
    background-color: var(--card-bg);
    border-radius: var(--radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
}

.chart-wrapper h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.1rem;
}

.chart-wrapper.full-width {
    grid-column: 1 / -1;
}

canvas {
    width: 100% !important;
    height: auto !important;
    max-height: 300px;
}

/* Tables */
.financial-tables {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    margin-top: 1.5rem;
}

.assets-container, .liabilities-container {
    background-color: var(--card-bg);
    border-radius: var(--radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
}

.assets-container h3, .liabilities-container h3 {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
}

thead {
    border-bottom: 2px solid var(--border-color);
}

th, td {
    text-align: left;
    padding: 0.75rem;
    border-bottom: 1px solid var(--border-color);
}

th {
    font-weight: 600;
    color: var(--text-light);
}

tfoot {
    font-weight: 600;
    border-top: 2px solid var(--border-color);
}

/* Forms and Buttons */
button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: var(--radius);
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
}

button:hover {
    background-color: var(--primary-dark);
}

.add-btn {
    font-size: 0.9rem;
    padding: 0.25rem 0.75rem;
}

.year-selector {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
}

select {
    padding: 0.5rem;
    border-radius: var(--radius);
    border: 1px solid var(--border-color);
    background-color: white;
}

/* Modal */
#modal-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background-color: var(--card-bg);
    border-radius: var(--radius);
    padding: 2rem;
    max-width: 500px;
    width: 90%;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    position: relative;
}

.modal-hidden {
    display: none;
}

.close-modal {
    position: absolute;
    top: 1rem;
    right: 1rem;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-light);
    transition: color 0.2s;
}

.close-modal:hover {
    color: var(--text-dark);
}

/* Milestones */
.milestone-tracker {
    background-color: var(--card-bg);
    border-radius: var(--radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
}

#milestones-list {
    margin-bottom: 1rem;
}

/* Action Buttons */
.action-btn {
    background: none;
    border: none;
    color: var(--text-light);
    cursor: pointer;
    padding: 0.25rem;
    margin-left: 0.5rem;
}

.action-btn:hover {
    color: var(--primary-color);
}

.delete-btn:hover {
    color: var(--danger-color);
}

/* Form Styles */
.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text-dark);
}

.form-group input, 
.form-group select, 
.form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: var(--radius);
    font-size: 1rem;
    transition: var(--transition);
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(58, 123, 213, 0.1);
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 1.5rem;
}

.cancel-btn {
    background-color: #f1f1f1;
    color: var(--text-color);
}

.cancel-btn:hover {
    background-color: #e0e0e0;
}

.save-btn {
    background-color: var(--primary-color);
}

.save-btn:hover {
    background-color: var(--primary-dark);
}

.danger-btn {
    background-color: var(--danger-color);
}

.danger-btn:hover {
    background-color: #e03456;
}

/* Empty States */
.empty-table, .empty-list {
    text-align: center;
    color: var(--text-light);
    padding: 1.5rem;
    font-style: italic;
}

/* Milestone Styles */
.milestone {
    display: flex;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
}

.milestone:last-child {
    border-bottom: none;
}

.milestone-status {
    margin-right: 1rem;
}

.milestone-icon {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f1f1f1;
    color: var(--text-light);
}

.milestone.achieved .milestone-icon {
    background-color: var(--success-color);
    color: white;
}

.milestone-details {
    flex: 1;
}

.milestone-details h4 {
    margin: 0;
    font-size: 1rem;
}

.milestone-details p {
    margin: 0.25rem 0 0;
    color: var(--text-light);
    font-size: 0.9rem;
}

.milestone-actions {
    margin-left: 1rem;
}

/* Warning Text */
.warning {
    color: var(--danger-color);
    font-weight: 500;
}

/* Tab System */
.tabs {
    display: flex;
    border-bottom: 1px solid #ddd;
    margin-bottom: 20px;
}

.tab-button {
    background: none;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    margin-right: 5px;
    border-radius: 5px 5px 0 0;
    font-weight: 500;
    transition: all 0.2s ease;
    position: relative;
    opacity: 0.7;
    background-color: var(--primary-color);
}

.tab-button:hover {
    background-color: var(--primary-color);
    opacity: 0.85;
}

.tab-button.active {
    opacity: 1;
    background-color: #f5f5f5;
}

.tab-button.active::after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 0;
    width: 100%;
    height: 3px;
    background-color: var(--primary-color);
    border-radius: 3px 3px 0 0;
}

.tab-content {
    display: none;
    padding: 10px 0;
}

.tab-content.active {
    display: block;
    animation: fadeIn 0.3s ease forwards;
}

textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    resize: vertical;
    font-family: monospace;
    font-size: 12px;
}

/* Responsive Design */
@media (min-width: 768px) {
    header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    #main-nav ul {
        margin: 0;
    }
    
    .financial-tables {
        grid-template-columns: 1fr 1fr;
    }
}

@media (max-width: 767px) {
    .summary-cards {
        grid-template-columns: 1fr;
    }
    
    .chart-wrapper {
        min-height: 300px;
    }
    
    .modal-content {
        width: 95%;
        padding: 1.5rem;
    }
    
    .form-actions {
        flex-direction: column;
    }
    
    .form-actions button {
        width: 100%;
    }
}

/* Salary Tracking */
.salary-container {
    display: flex;
    flex-direction: column;
    gap: 30px;
}

.salary-history {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
}

#salary-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

#salary-table th,
#salary-table td {
    padding: 12px 15px;
    text-align: left;
}

#salary-table th {
    background-color: #f8f9fa;
    color: #333;
    font-weight: 600;
}

#salary-table tbody tr {
    border-bottom: 1px solid #eee;
}

#salary-table tbody tr:hover {
    background-color: #f8f9fa;
}

.chart-wrapper {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    height: 350px;
    margin-bottom: 20px;
}

@media (min-width: 992px) {
    .salary-container {
        flex-direction: row;
    }
    
    .salary-history {
        flex: 3;
    }
    
    .chart-wrapper {
        flex: 2;
    }
}

/* Budgeting section styles */
.budget-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.income-inputs {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.results-container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-top: 20px;
}

.joint-account-settings {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    margin-top: 20px;
}

#joint-results {
    margin-top: 20px;
}

.percentage {
    font-size: 0.9rem;
    color: #666;
    margin-top: 5px;
}

/* Settings icon styles */
.settings-btn {
    cursor: pointer;
    padding: 8px;
    border-radius: 50%;
    background-color: #3a7bd5;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
    margin-left: 15px;
}

.settings-btn:hover {
    background-color: #2c62b3;
}

.settings-btn svg {
    color: white;
}

/* Savings Tracking Styles */
.savings-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-bottom: 30px;
}

.savings-history {
    background-color: var(--card-bg);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    padding: 20px;
    width: 100%;
}

#savings-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

#savings-table th,
#savings-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

#savings-table th {
    font-weight: 600;
    color: var(--text-dark);
}

#savings-table tbody tr {
    transition: var(--transition);
}

#savings-table tbody tr:hover {
    background-color: rgba(58, 123, 213, 0.05);
}

.savings-summary {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.savings-card, .pension-calculator {
    background-color: var(--card-bg);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    padding: 20px;
}

.savings-stats {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 15px;
}

.stat {
    display: flex;
    justify-content: space-between;
    padding: 10px 0;
    border-bottom: 1px solid var(--border-color);
}

.stat .label {
    font-weight: 500;
    color: var(--text-light);
}

.stat .value {
    font-weight: 600;
    color: var(--primary-color);
    font-size: 1.1em;
}

.financial-order {
    background-color: var(--card-bg);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    padding: 20px;
    margin-top: 20px;
}

.progress-steps {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 15px;
}

.step {
    display: flex;
    gap: 15px;
    padding: 15px;
    border-radius: var(--radius);
    background-color: #f5f5f5;
    opacity: 0.7;
    transition: var(--transition);
}

.step.active {
    background-color: rgba(58, 123, 213, 0.1);
    opacity: 1;
    border-left: 4px solid var(--primary-color);
}

.step-number {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background-color: #ddd;
    color: var(--text-dark);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

.step.active .step-number {
    background-color: var(--primary-color);
    color: white;
}

.step-content {
    flex: 1;
}

.step-content h4 {
    margin: 0 0 5px;
    color: var(--text-dark);
}

.step-content p {
    margin: 0;
    font-size: 0.9em;
    color: var(--text-light);
}

@media (min-width: 992px) {
    .savings-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-areas:
            "history history"
            "summary charts"
            "order order";
        gap: 20px;
    }
    
    .savings-history {
        grid-area: history;
    }
    
    .savings-summary {
        grid-area: summary;
        flex-direction: column;
    }
    
    .charts-container {
        grid-area: charts;
    }
    
    .financial-order {
        grid-area: order;
        margin-top: 0;
    }
    
    .savings-summary {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }
}

@media (min-width: 1200px) {
    .savings-summary {
        flex-direction: row;
    }
    
    .savings-card, .pension-calculator {
        flex: 1;
    }
} 

----- ui-fixes.css -----
/* UI Fixes - Addresses specific UI issues */

/* Fix table layout for assets and liabilities */
.finance-table {
    width: 100%;
    table-layout: fixed;
    border-collapse: collapse;
}

.finance-table th, 
.finance-table td {
    padding: 8px;
    text-align: left;
    vertical-align: middle;
}

/* Adjust column widths */
.finance-table th:first-child,
.finance-table td:first-child {
    width: 35%;
    word-wrap: break-word;
}

.finance-table th:nth-child(2),
.finance-table td:nth-child(2) {
    width: 35%;
    word-wrap: break-word;
}

/* Keep buttons side by side */
.item-actions {
    display: flex !important;
    gap: 5px;
    justify-content: flex-end;
    min-width: 110px; /* Minimum width to prevent buttons from stacking */
}

.edit-btn, .delete-btn {
    flex-shrink: 0; /* Prevent buttons from shrinking */
    padding: 4px 8px !important;
    min-width: 50px; /* Minimum width for buttons */
}

/* Improve overall table appearance */
#assets-table, #liabilities-table {
    margin-bottom: 20px;
}

.finance-item {
    border-bottom: 1px solid #eee;
}

/* Make sure tables don't overflow their containers */
.table-container {
    overflow-x: auto;
}

/* Net Worth change indicators */
.positive-change {
    color: #28a745 !important;
    font-weight: bold;
}

.negative-change {
    color: #dc3545 !important;
    font-weight: bold;
}

/* Chart styles */
.charts-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.chart-wrapper {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 15px;
    min-height: 300px;
}

.chart-wrapper h3 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 1.1rem;
    color: #333;
    text-align: center;
}

.chart-wrapper canvas {
    width: 100% !important;
    height: 280px !important;
}

.chart-wrapper.full-width {
    grid-column: 1 / -1;
}

/* Trends section specific styles */
#trends .chart-wrapper {
    margin-bottom: 25px;
}

#trends .full-width canvas {
    height: 250px !important;
}

#net-worth-growth-chart,
#asset-categories-time-chart,
#growth-vs-benchmarks-chart {
    margin: auto;
} 

----- index.html -----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Net Worth Tracker</title>
    <link rel="stylesheet" href="css/normalize.css">
    <link rel="stylesheet" href="css/styles.css">
    <!-- Section isolation should override other styles -->
    <link rel="stylesheet" href="css/section-isolation.css">
    <!-- Load page fixers next -->
    <script src="js/page-fixer.js"></script>
    <script src="js/navigation-fix.js"></script>
    <!-- Add modal fix script -->
    <script src="js/modal-fix.js"></script>
    <!-- Add Chart.js for charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- UI Fixes CSS - Fixes specific UI issues -->
    <link rel="stylesheet" href="css/ui-fixes.css">
    <style>
        /* Modal visibility control - these take precedence over other styles */
        #modal-container.modal-hidden {
            display: none !important;
        }
        #modal-container.modal-visible {
            display: flex !important;
        }
    </style>
</head>
<body>
    <header>
        <h1>Net Worth Tracker</h1>
        <nav id="main-nav">
            <ul>
                <li><a href="#dashboard" class="active">Dashboard</a></li>
                <li><a href="#assets-liabilities">Assets & Liabilities</a></li>
                <li><a href="#trends">Trends & Analysis</a></li>
                <li><a href="#goals">Milestones & Goals</a></li>
                <li><a href="#salary-tracking">Salary Tracking</a></li>
                <li><a href="#savings-tracking">Savings History</a></li>
                <li><a href="#budgeting">Budgeting & Outgoings</a></li>
            </ul>
        </nav>
        <div id="settings-icon" class="settings-btn" title="Data Import/Export">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="3"></circle>
                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
            </svg>
        </div>
    </header>

    <main>
        <!-- Dashboard Section -->
        <section id="dashboard" class="active-section">
            <h2>Financial Dashboard</h2>
            <div class="summary-cards">
                <div class="card">
                    <h3>Current Net Worth</h3>
                    <p class="value" id="current-net-worth">£0.00</p>
                    <p class="change" id="net-worth-change">+0% from last year</p>
                </div>
                <div class="card">
                    <h3>Assets</h3>
                    <p class="value" id="total-assets">£0.00</p>
                </div>
                <div class="card">
                    <h3>Liabilities</h3>
                    <p class="value" id="total-liabilities">£0.00</p>
                </div>
                <div class="card">
                    <h3>Debt-to-Asset Ratio</h3>
                    <p class="value" id="debt-asset-ratio">0%</p>
                    <div class="progress-bar">
                        <div class="progress" id="debt-ratio-bar" style="width: 0%;"></div>
                    </div>
                </div>
            </div>
            
            <div class="charts-container">
                <div class="chart-wrapper">
                    <h3>Net Worth History</h3>
                    <canvas id="net-worth-chart"></canvas>
                </div>
                <div class="chart-wrapper">
                    <h3>Asset Diversification</h3>
                    <canvas id="asset-diversity-chart"></canvas>
                </div>
            </div>
        </section>

        <!-- Assets & Liabilities Section -->
        <section id="assets-liabilities" class="hidden-section">
            <h2>Assets & Liabilities</h2>
            
            <div class="section-controls">
                <div class="year-selector">
                    <label for="year-select">Year:</label>
                    <select id="year-select">
                        <!-- Will be populated by JavaScript -->
                    </select>
                    <button id="add-year-btn">+ Add Year</button>
                    <button id="delete-year-btn">Delete Year</button>
                </div>
            </div>

            <div class="financial-tables">
                <div class="assets-container">
                    <h3>Assets <button id="add-asset" class="add-btn">+ Add Asset</button></h3>
                    <table id="assets-table">
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Item</th>
                                <th>Value</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="2">Total Assets</td>
                                <td id="assets-total">£0.00</td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="liabilities-container">
                    <h3>Liabilities <button id="add-liability" class="add-btn">+ Add Liability</button></h3>
                    <table id="liabilities-table">
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Item</th>
                                <th>Value</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="2">Total Liabilities</td>
                                <td id="liabilities-total">£0.00</td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </section>

        <!-- Trends & Analysis Section -->
        <section id="trends" class="hidden-section">
            <h2>Trends & Analysis</h2>
            
            <div class="charts-container">
                <div class="chart-wrapper full-width">
                    <h3>Net Worth Growth</h3>
                    <canvas id="net-worth-growth-chart"></canvas>
                </div>
                
                <div class="chart-wrapper">
                    <h3>Asset Categories Over Time</h3>
                    <canvas id="asset-categories-time-chart"></canvas>
                </div>
                
                <div class="chart-wrapper">
                    <h3>Your Growth vs Benchmarks</h3>
                    <canvas id="growth-vs-benchmarks-chart"></canvas>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 20px;">
                <button id="refresh-trends-btn" style="padding: 8px 15px; background-color: #3a7bd5; color: white; border: none; border-radius: 4px; cursor: pointer;">Refresh Charts</button>
            </div>
        </section>

        <!-- Milestones & Goals Section -->
        <section id="goals" class="hidden-section">
            <h2>Milestones & Goals</h2>
            
            <div class="goals-container">
                <div class="milestone-tracker">
                    <h3>Net Worth Milestones <button id="add-milestone" class="add-btn">+ Add Milestone</button></h3>
                    <div id="milestones-container">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>
            </div>
        </section>

        <!-- Salary Tracking Section -->
        <section id="salary-tracking" class="hidden-section">
            <h2>Salary History</h2>
            
            <div class="salary-container">
                <div class="salary-history">
                    <h3>Salary Progression <button id="add-salary" class="add-btn">+ Add Salary</button></h3>
                    <table id="salary-table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Company</th>
                                <th>Title</th>
                                <th>Salary</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="salary-table-body">
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                <div class="chart-wrapper">
                    <h3>Salary Growth</h3>
                    <canvas id="salary-growth-chart"></canvas>
                </div>
            </div>
        </section>
        
        <!-- Savings History Section -->
        <section id="savings-tracking" class="hidden-section">
            <h2>Savings History</h2>
            
            <div class="savings-container">
                <div class="savings-history">
                    <h3>Monthly Savings <button id="add-saving" class="add-btn">+ Add Saving</button></h3>
                    <table id="savings-table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Amount</th>
                                <th>Category</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <div class="savings-summary">
                    <div class="savings-card">
                        <h3>Savings Summary</h3>
                        <div class="savings-stats">
                            <div class="stat">
                                <span class="label">Monthly Average:</span>
                                <span class="value" id="monthly-savings-avg">£0.00</span>
                            </div>
                            <div class="stat">
                                <span class="label">Current Savings Rate:</span>
                                <span class="value" id="savings-rate">0%</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="pension-calculator">
                        <h3>Pension Calculator</h3>
                        <div class="form-group">
                            <label for="personal-contribution">Your Contribution (%):</label>
                            <input type="number" id="personal-contribution" placeholder="5" min="0" max="100" step="0.1" />
                        </div>
                        <div class="form-group">
                            <label for="employer-contribution">Employer Contribution (%):</label>
                            <input type="number" id="employer-contribution" placeholder="3" min="0" max="100" step="0.1" />
                        </div>
                        <div class="form-group">
                            <label for="emergency-fund-goal">Emergency Fund Goal (months):</label>
                            <input type="number" id="emergency-fund-goal" placeholder="3" min="1" max="12" step="1" />
                        </div>
                        <button id="calculate-savings" class="save-btn">Calculate</button>
                    </div>
                </div>
                
                <div class="charts-container">
                    <div class="chart-wrapper">
                        <h3>Savings Distribution</h3>
                        <canvas id="savings-distribution-chart"></canvas>
                    </div>
                    <div class="chart-wrapper">
                        <h3>Savings Timeline</h3>
                        <canvas id="savings-timeline-chart"></canvas>
                    </div>
                </div>
                
                <div class="financial-order">
                    <h3>Financial Order of Operations</h3>
                    <div class="progress-steps" id="financial-steps">
                        <!-- Will be populated by JavaScript -->
                        <div class="step active">
                            <div class="step-number">1</div>
                            <div class="step-content">
                                <h4>Budget & Emergency Fund</h4>
                                <p>Establish a budget and build your emergency fund of 3-6 months expenses</p>
                                <div class="progress-bar">
                                    <div class="progress" id="emergency-fund-progress" style="width: 0%;"></div>
                                </div>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-number">2</div>
                            <div class="step-content">
                                <h4>Employer Match</h4>
                                <p>Contribute enough to get full employer pension match</p>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-number">3</div>
                            <div class="step-content">
                                <h4>High Interest Debt</h4>
                                <p>Pay off high-interest debt (credit cards, etc.)</p>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-number">4</div>
                            <div class="step-content">
                                <h4>Full ISA</h4>
                                <p>Max out Stocks and Shares ISA (£20,000/year)</p>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-number">5</div>
                            <div class="step-content">
                                <h4>Other Goals</h4>
                                <p>Save for other large purchases or investments</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Budgeting & Outgoings Section -->
        <section id="budgeting" class="hidden-section">
            <h2>Budgeting & Outgoings</h2>
            
            <div class="budget-container">
                <div class="income-inputs">
                    <h3>Monthly Take-Home Pay</h3>
                    <div class="form-group">
                        <label for="your-income">Your Income:</label>
                        <input type="number" id="your-income" placeholder="£0.00" step="0.01" min="0" />
                    </div>
                    <div class="form-group">
                        <label for="spouse-income">Spouse/Partner Income:</label>
                        <input type="number" id="spouse-income" placeholder="£0.00" step="0.01" min="0" />
                    </div>
                    <div class="form-actions">
                        <button id="calculate-budget" class="save-btn">Calculate</button>
                    </div>
                </div>
                
                <div class="results-container" id="budget-results" style="display: none;">
                    <h3>Contribution Results</h3>
                    <div class="summary-cards">
                        <div class="card">
                            <h3>Total Household Income</h3>
                            <p class="value" id="total-income">£0.00</p>
                        </div>
                        <div class="card">
                            <h3>Your Contribution</h3>
                            <p class="value" id="your-contribution">£0.00</p>
                            <p class="percentage" id="your-percentage">0%</p>
                        </div>
                        <div class="card">
                            <h3>Partner's Contribution</h3>
                            <p class="value" id="spouse-contribution">£0.00</p>
                            <p class="percentage" id="spouse-percentage">0%</p>
                        </div>
                    </div>
                    
                    <div class="joint-account-settings">
                        <h3>Joint Account Calculations</h3>
                        <div class="form-group">
                            <label for="joint-expenses">Monthly Joint Expenses:</label>
                            <input type="number" id="joint-expenses" placeholder="£0.00" step="0.01" min="0" />
                        </div>
                        <div class="form-group">
                            <label for="contribution-type">Contribution Method:</label>
                            <select id="contribution-type">
                                <option value="equal">Equal Amounts</option>
                                <option value="proportional" selected>Proportional to Income</option>
                                <option value="custom">Custom Split</option>
                            </select>
                        </div>
                        <div id="custom-split-container" style="display: none;">
                            <div class="form-group">
                                <label for="your-split">Your Percentage:</label>
                                <input type="number" id="your-split" min="0" max="100" value="50" />
                            </div>
                        </div>
                        <div class="form-actions">
                            <button id="calculate-joint" class="save-btn">Calculate Joint Account</button>
                        </div>
                    </div>
                    
                    <div id="joint-results" style="display: none;">
                        <h3>Joint Account Contributions</h3>
                        <div class="summary-cards">
                            <div class="card">
                                <h3>Total Joint Expenses</h3>
                                <p class="value" id="total-expenses">£0.00</p>
                            </div>
                            <div class="card">
                                <h3>Your Monthly Transfer</h3>
                                <p class="value" id="your-transfer">£0.00</p>
                            </div>
                            <div class="card">
                                <h3>Partner's Monthly Transfer</h3>
                                <p class="value" id="spouse-transfer">£0.00</p>
                            </div>
                        </div>
                        
                        <div class="chart-wrapper">
                            <h3>Joint Expenses Split</h3>
                            <canvas id="joint-expenses-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Modal Container -->
    <div id="modal-container" class="modal-hidden">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <div id="modal-body">
                <!-- Modal content will be injected here -->
            </div>
        </div>
    </div>

    <!-- Test Script (non-module) -->
    <script src="js/import-export.js"></script>
    
    <!-- Module Test -->
    <script src="js/module-test.js" type="module"></script>
    
    <!-- Main Application Scripts -->
    <script src="js/main.js" type="module"></script>
    
    <!-- Simple Test Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            
            const settingsBtn = document.getElementById('settings-icon');
            
            if (settingsBtn) {
                settingsBtn.addEventListener('click', function() {
                });
            }
        });
    </script>
</body>
</html> 

----- app-initializer.js -----
// App Initializer - ensures data is loaded correctly

document.addEventListener('DOMContentLoaded', () => {
    // Check if data exists in localStorage
    const data = JSON.parse(localStorage.getItem('netWorthData') || '{}');
    
    // Initialize data if it doesn't exist
    if (!data.years || Object.keys(data.years).length === 0) {
        // Initialize with the current year
        const currentYear = new Date().getFullYear().toString();
        
        // Create data structure with default values
        const initialData = {
            years: {
                [currentYear]: {
                    assets: [],
                    liabilities: []
                }
            },
            milestones: [
                {
                    id: Date.now().toString(),
                    amount: 10000,
                    name: 'First £10,000',
                    achieved: false
                }
            ]
        };
        
        // Save to localStorage
        localStorage.setItem('netWorthData', JSON.stringify(initialData));
    }
    
    // Update year selector
    setTimeout(() => {
        updateYearSelector();
    }, 500);
    
    function updateYearSelector() {
        const yearSelect = document.getElementById('year-select');
        if (!yearSelect) {
            setTimeout(updateYearSelector, 500);
            return;
        }
        
        const data = JSON.parse(localStorage.getItem('netWorthData') || '{}');
        const years = data.years ? Object.keys(data.years) : [];
        
        if (years.length === 0) {
            return;
        }
        
        // Find the most recent year (highest number)
        const mostRecentYear = years.sort((a, b) => parseInt(b) - parseInt(a))[0];
        
        // Check if there are options already
        if (yearSelect.options.length > 0) {
            // Set to most recent year
            yearSelect.value = mostRecentYear;
            
            // Trigger change event to update UI
            yearSelect.dispatchEvent(new Event('change'));
        } else {
            // Check again after a short delay to see if options were added
            setTimeout(() => {
                if (yearSelect.options.length === 0) {
                    // Force adding years to the selector
                    years.forEach(year => {
                        const option = document.createElement('option');
                        option.value = year;
                        option.textContent = year;
                        yearSelect.appendChild(option);
                    });
                    
                    // Set to most recent year
                    yearSelect.value = mostRecentYear;
                    
                    // Trigger change event to update UI
                    yearSelect.dispatchEvent(new Event('change'));
                } else {
                    // Options were added by something else, just select the most recent
                    yearSelect.value = mostRecentYear;
                    yearSelect.dispatchEvent(new Event('change'));
                }
            }, 1000);
        }
    }
}); 

----- app.js -----
// Main Application Entry Point
import { DataStore } from './dataStore.js';
import { UIController } from './uiController.js';
import { ChartManager } from './chartManager.js';
import { ModalManager } from './modalManager.js';
import { formatCurrency, calculatePercentChange } from './utils.js';

// Initialize app when DOM content is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Initialize global data store
    const dataStore = new DataStore();
    
    // Initialize UI controller
    const ui = new UIController(dataStore);
    
    // Initialize chart manager
    const chartManager = new ChartManager(dataStore);
    
    // Initialize modal manager
    const modalManager = new ModalManager(dataStore, ui, chartManager);
    
    // Create a global reference to the app components so modal-fix.js can access them
    window.appInstance = {
        dataStore,
        ui,
        chartManager,
        modalManager
    };
    
    // Set up navigation event listeners
    setupNavigation();
    
    // Initial render of data
    initializeApp(dataStore, ui, chartManager);

    // Check if URL has a hash and navigate to that section
    handleInitialNavigation();
});

function handleInitialNavigation() {
    // If there's a hash in the URL, navigate to that section
    if (window.location.hash) {
        const targetId = window.location.hash.substring(1);
        const targetSection = document.getElementById(targetId);
        const targetLink = document.querySelector(`#main-nav a[href="#${targetId}"]`);

        if (targetSection && targetLink) {
            // Update active navigation item
            document.querySelectorAll('#main-nav a').forEach(link => link.classList.remove('active'));
            targetLink.classList.add('active');

            // Show target section, hide others
            document.querySelectorAll('main > section').forEach(section => {
                if (section.id === targetId) {
                    section.classList.add('active-section');
                    section.classList.remove('hidden-section');
                } else {
                    section.classList.remove('active-section');
                    section.classList.add('hidden-section');
                }
            });
        }
    }
}

function setupNavigation() {
    const navLinks = document.querySelectorAll('#main-nav a');
    const sections = document.querySelectorAll('main > section');
    
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href').substring(1);
            
            // Update active navigation item
            navLinks.forEach(navLink => navLink.classList.remove('active'));
            link.classList.add('active');
            
            // Show target section, hide others
            sections.forEach(section => {
                if (section.id === targetId) {
                    section.classList.add('active-section');
                    section.classList.remove('hidden-section');
                } else {
                    section.classList.remove('active-section');
                    section.classList.add('hidden-section');
                }
            });

            // Update the URL hash
            window.location.hash = targetId;
        });
    });
}

function initializeApp(dataStore, ui, chartManager) {
    // Load data from localStorage if available
    dataStore.loadData();
    
    // Render UI components
    ui.renderYearSelector();
    ui.renderFinancialTables();
    ui.renderDashboardSummary();
    ui.renderMilestones();
    ui.renderSalaryTable();
    
    // Initialize charts
    chartManager.initializeCharts();
    chartManager.updateAllCharts();
    
    // Add event listeners for interactive elements
    setupEventListeners(dataStore, ui, chartManager);
}

function setupEventListeners(dataStore, ui, chartManager) {
    // Year selector
    const yearSelect = document.getElementById('year-select');
    if (yearSelect) {
        yearSelect.addEventListener('change', () => {
            ui.renderFinancialTables();
        });
    }
    
    // Add year button
    const addYearBtn = document.getElementById('add-year');
    if (addYearBtn) {
        addYearBtn.addEventListener('click', () => {
            const modal = document.getElementById('modal-container');
            const modalBody = document.getElementById('modal-body');
            
            // Show add year modal
            modalBody.innerHTML = `
                <h2>Add New Year</h2>
                <div class="form-group">
                    <label for="new-year">Year:</label>
                    <input type="number" id="new-year" min="1900" max="2100" value="${new Date().getFullYear()}" />
                </div>
                <div class="form-actions">
                    <button id="cancel-year" class="cancel-btn">Cancel</button>
                    <button id="save-year" class="save-btn">Add Year</button>
                </div>
            `;
            
            modal.classList.remove('modal-hidden');
            modal.classList.add('modal-visible');
            
            // Set up modal event listeners
            document.getElementById('cancel-year').addEventListener('click', () => {
                modal.classList.add('modal-hidden');
                modal.classList.remove('modal-visible');
            });
            
            document.getElementById('save-year').addEventListener('click', () => {
                const yearInput = document.getElementById('new-year');
                const year = parseInt(yearInput.value, 10);
                
                if (year && year >= 1900 && year <= 2100) {
                    dataStore.addYear(year);
                    ui.renderYearSelector();
                    modal.classList.add('modal-hidden');
                    modal.classList.remove('modal-visible');
                } else {
                    alert('Please enter a valid year between 1900 and 2100');
                }
            });
        });
    }
    
    // Add asset button
    const addAssetBtn = document.getElementById('add-asset');
    if (addAssetBtn) {
        addAssetBtn.addEventListener('click', () => {
            const currentYear = document.getElementById('year-select').value;
            const modal = document.getElementById('modal-container');
            
            // Show add asset form in modal
            document.getElementById('modal-body').innerHTML = `
                <h2>Add New Asset</h2>
                <div class="form-group">
                    <label for="asset-category">Category:</label>
                    <select id="asset-category">
                        <option value="Properties">Properties</option>
                        <option value="Retirement Savings">Retirement Savings</option>
                        <option value="Investments">Investments</option>
                        <option value="Cash and Cash Equivalent">Cash and Cash Equivalent</option>
                        <option value="Other Assets">Other Assets</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="asset-name">Item Name:</label>
                    <input type="text" id="asset-name" placeholder="e.g. Home, Car, Stocks..." />
                </div>
                <div class="form-group">
                    <label for="asset-value">Value (£):</label>
                    <input type="number" id="asset-value" min="0" step="0.01" />
                </div>
                <div class="form-actions">
                    <button id="cancel-asset" class="cancel-btn">Cancel</button>
                    <button id="save-asset" class="save-btn">Add Asset</button>
                </div>
            `;
            
            modal.classList.remove('modal-hidden');
            modal.classList.add('modal-visible');
            
            // Set up modal event listeners
            document.getElementById('cancel-asset').addEventListener('click', () => {
                modal.classList.add('modal-hidden');
                modal.classList.remove('modal-visible');
            });
            
            document.getElementById('save-asset').addEventListener('click', () => {
                const category = document.getElementById('asset-category').value;
                const name = document.getElementById('asset-name').value;
                const valueInput = document.getElementById('asset-value').value;
                const value = parseFloat(valueInput);
                
                if (category && name && !isNaN(value) && value >= 0) {
                    dataStore.addAsset(currentYear, category, name, value);
                    ui.renderFinancialTables();
                    ui.renderDashboardSummary();
                    chartManager.updateAllCharts();
                    modal.classList.add('modal-hidden');
                    modal.classList.remove('modal-visible');
                } else {
                    alert('Please fill all fields with valid values');
                }
            });
        });
    }
    
    // Add liability button
    const addLiabilityBtn = document.getElementById('add-liability');
    if (addLiabilityBtn) {
        addLiabilityBtn.addEventListener('click', () => {
            const currentYear = document.getElementById('year-select').value;
            const modal = document.getElementById('modal-container');
            
            // Show add liability form in modal
            document.getElementById('modal-body').innerHTML = `
                <h2>Add New Liability</h2>
                <div class="form-group">
                    <label for="liability-category">Category:</label>
                    <select id="liability-category">
                        <option value="Mortgages">Mortgages</option>
                        <option value="Car loans">Car loans</option>
                        <option value="Student loans">Student loans</option>
                        <option value="Credit Card Debt">Credit Card Debt</option>
                        <option value="Personal Loans">Personal Loans</option>
                        <option value="Other Debts">Other Debts</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="liability-value">Value (£):</label>
                    <input type="number" id="liability-value" min="0" step="0.01" />
                </div>
                <div class="form-actions">
                    <button id="cancel-liability" class="cancel-btn">Cancel</button>
                    <button id="save-liability" class="save-btn">Add Liability</button>
                </div>
            `;
            
            modal.classList.remove('modal-hidden');
            modal.classList.add('modal-visible');
            
            // Set up modal event listeners
            document.getElementById('cancel-liability').addEventListener('click', () => {
                modal.classList.add('modal-hidden');
                modal.classList.remove('modal-visible');
            });
            
            document.getElementById('save-liability').addEventListener('click', () => {
                const category = document.getElementById('liability-category').value;
                const valueInput = document.getElementById('liability-value').value;
                const value = parseFloat(valueInput);
                
                if (category && !isNaN(value) && value >= 0) {
                    dataStore.addLiability(currentYear, category, value);
                    ui.renderFinancialTables();
                    ui.renderDashboardSummary();
                    chartManager.updateAllCharts();
                    modal.classList.add('modal-hidden');
                    modal.classList.remove('modal-visible');
                } else {
                    alert('Please fill all fields with valid values');
                }
            });
        });
    }
    
    // Refresh trends button
    const refreshTrendsBtn = document.getElementById('refresh-trends-btn');
    if (refreshTrendsBtn) {
        refreshTrendsBtn.addEventListener('click', () => {
            chartManager.updateAllCharts();
        });
    }
    
    // Add milestone button
    setupAddMilestoneButton(dataStore, ui);
    
    // Add salary button
    setupAddSalaryButton(dataStore, ui, chartManager);
}

function setupAddMilestoneButton(dataStore, ui) {
    const addMilestoneBtn = document.getElementById('add-milestone');
    if (addMilestoneBtn) {
        addMilestoneBtn.addEventListener('click', () => {
            const modal = document.getElementById('modal-container');
            const modalBody = document.getElementById('modal-body');
            
            // Show add milestone modal
            modalBody.innerHTML = `
                <h2>Add New Milestone</h2>
                <div class="form-group">
                    <label for="milestone-amount">Amount (£):</label>
                    <input type="number" id="milestone-amount" min="0" step="1000" />
                </div>
                <div class="form-group">
                    <label for="milestone-name">Milestone Name:</label>
                    <input type="text" id="milestone-name" placeholder="e.g. First £10K, Six Figure Club..." />
                </div>
                <div class="form-actions">
                    <button id="cancel-milestone" class="cancel-btn">Cancel</button>
                    <button id="save-milestone" class="save-btn">Add Milestone</button>
                </div>
            `;
            
            modal.classList.remove('modal-hidden');
            modal.classList.add('modal-visible');
            
            // Set up modal event listeners
            document.getElementById('cancel-milestone').addEventListener('click', () => {
                modal.classList.add('modal-hidden');
                modal.classList.remove('modal-visible');
            });
            
            document.getElementById('save-milestone').addEventListener('click', () => {
                const amountInput = document.getElementById('milestone-amount').value;
                const name = document.getElementById('milestone-name').value;
                const amount = parseFloat(amountInput);
                
                if (!isNaN(amount) && amount > 0 && name) {
                    dataStore.addMilestone(amount, name);
                    ui.renderMilestones();
                    modal.classList.add('modal-hidden');
                    modal.classList.remove('modal-visible');
                } else {
                    alert('Please enter a valid amount and name');
                }
            });
        });
    }
}

function setupAddSalaryButton(dataStore, ui, chartManager) {
    const addSalaryBtn = document.getElementById('add-salary');
    if (addSalaryBtn) {
        // Remove any existing event listeners by cloning and replacing
        const newAddSalaryBtn = addSalaryBtn.cloneNode(true);
        addSalaryBtn.parentNode.replaceChild(newAddSalaryBtn, addSalaryBtn);
        
        // Add new event listener to the cloned button
        newAddSalaryBtn.addEventListener('click', (event) => {
            event.preventDefault(); // Prevent default button action
            
            // Get current date for the default value of the month input
            const now = new Date();
            const currentMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
            
            // Create modal content
            const modalContent = `
                <h2>Add Salary Entry</h2>
                <div class="form-group">
                    <label for="salary-date">Date (Month/Year):</label>
                    <input type="month" id="salary-date" value="${currentMonth}" />
                </div>
                <div class="form-group">
                    <label for="salary-company">Company:</label>
                    <input type="text" id="salary-company" placeholder="Company name" />
                </div>
                <div class="form-group">
                    <label for="salary-title">Title:</label>
                    <input type="text" id="salary-title" placeholder="Job title" />
                </div>
                <div class="form-group">
                    <label for="salary-amount">Salary (£):</label>
                    <input type="number" id="salary-amount" min="0" step="0.01" />
                </div>
                <div class="form-actions">
                    <button id="cancel-salary" class="cancel-btn">Cancel</button>
                    <button id="save-salary" class="save-btn">Add Salary</button>
                </div>
            `;
            
            // Show the modal with our reliable function
            if (typeof window.showModal === 'function') {
                window.showModal(modalContent, 'add-salary');
            } else {
                // Fallback if showModal is not available
                const modalContainer = document.getElementById('modal-container');
                const modalBody = document.getElementById('modal-body');
                
                if (modalContainer && modalBody) {
                    // Set the modal content
                    modalBody.innerHTML = modalContent;
                    
                    // Show the modal - remove modal-hidden first, then add modal-visible
                    modalContainer.classList.remove('modal-hidden');
                    modalContainer.classList.add('modal-visible');
                    
                    // Set up the cancel button
                    const cancelBtn = document.getElementById('cancel-salary');
                    if (cancelBtn) {
                        cancelBtn.addEventListener('click', () => {
                            modalContainer.classList.add('modal-hidden');
                            modalContainer.classList.remove('modal-visible');
                        });
                    }
                    
                    // Set up the save button
                    const saveBtn = document.getElementById('save-salary');
                    if (saveBtn) {
                        saveBtn.addEventListener('click', () => {
                            const dateInput = document.getElementById('salary-date').value;
                            const company = document.getElementById('salary-company').value;
                            const title = document.getElementById('salary-title').value;
                            const amountInput = document.getElementById('salary-amount').value;
                            const amount = parseFloat(amountInput);
                            
                            if (dateInput && company && !isNaN(amount) && amount >= 0) {
                                try {
                                    // Convert the input (YYYY-MM) to a Date object
                                    const date = new Date(dateInput);
                                    
                                    if (dataStore) {
                                        dataStore.addSalaryEntry(date, company, title, amount);
                                        ui.renderSalaryTable();
                                        if (chartManager) {
                                            chartManager.updateSalaryGrowthChart();
                                        }
                                    }
                                    
                                    // Hide the modal
                                    modalContainer.classList.add('modal-hidden');
                                    modalContainer.classList.remove('modal-visible');
                                } catch (error) {
                                    alert('Error adding salary entry: ' + error.message);
                                }
                            } else {
                                alert('Please fill all fields with valid values');
                            }
                        });
                    }
                }
            }
        });
    }
}

// Close modal when clicking the X or outside the modal
const closeModalBtn = document.querySelector('.close-modal');
const modalContainer = document.getElementById('modal-container');

if (closeModalBtn && modalContainer) {
    closeModalBtn.addEventListener('click', () => {
        // Hide the modal - add modal-hidden first, then remove modal-visible
        modalContainer.classList.add('modal-hidden');
        modalContainer.classList.remove('modal-visible');
    });
    
    modalContainer.addEventListener('click', (e) => {
        if (e.target === modalContainer) {
            // Hide the modal - add modal-hidden first, then remove modal-visible
            modalContainer.classList.add('modal-hidden');
            modalContainer.classList.remove('modal-visible');
        }
    });
} 

----- chartManager.js -----
/**
 * Chart Manager Module
 * Handles all Chart.js visualizations
 */
import { formatCurrency } from './utils.js';

export class ChartManager {
    constructor(dataStore) {
        this.dataStore = dataStore;
        this.charts = {};
        
        // Set up event listener for data updates
        document.addEventListener('dataUpdated', () => {
            this.updateAllCharts();
        });
    }
    
    /**
     * Initialize all charts
     */
    initializeCharts() {
        // Dashboard charts
        this.initializeNetWorthChart();
        this.initializeAssetDiversityChart();
        
        // Trends charts
        this.initializeNetWorthGrowthChart();
        this.initializeAssetCategoriesTimeChart();
        this.initializeGrowthVsBenchmarksChart();
        
        // Salary chart
        this.initializeSalaryGrowthChart();
    }
    
    /**
     * Update all charts
     */
    updateAllCharts() {
        // Dashboard charts
        this.updateNetWorthChart();
        this.updateAssetDiversityChart();
        
        // Trends charts
        this.updateNetWorthGrowthChart();
        this.updateAssetCategoriesTimeChart();
        this.updateGrowthVsBenchmarksChart();
        
        // Salary chart
        this.updateSalaryGrowthChart();
    }
    
    /**
     * Initialize the Net Worth history chart
     */
    initializeNetWorthChart() {
        const ctx = document.getElementById('net-worth-chart');
        if (!ctx) return;
        
        // Destroy existing chart if it exists
        if (this.charts.netWorth) {
            this.charts.netWorth.destroy();
        }
        
        this.charts.netWorth = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Net Worth',
                        backgroundColor: 'rgba(58, 123, 213, 0.8)',
                        data: []
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return formatCurrency(value);
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return formatCurrency(context.raw);
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * Update the Net Worth history chart with current data
     */
    updateNetWorthChart() {
        if (!this.charts.netWorth) return;
        
        const history = this.dataStore.getNetWorthHistory();
        
        // Sort by year ascending for chart
        history.sort((a, b) => a.year - b.year);
        
        const labels = history.map(item => item.year.toString());
        const netWorthData = history.map(item => item.netWorth);
        
        this.charts.netWorth.data.labels = labels;
        this.charts.netWorth.data.datasets[0].data = netWorthData;
        this.charts.netWorth.update();
    }
    
    /**
     * Initialize the Asset Diversity pie chart
     */
    initializeAssetDiversityChart() {
        const ctx = document.getElementById('asset-diversity-chart');
        if (!ctx) return;
        
        // Destroy existing chart if it exists
        if (this.charts.assetDiversity) {
            this.charts.assetDiversity.destroy();
        }
        
        this.charts.assetDiversity = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: [],
                datasets: [{
                    data: [],
                    backgroundColor: [
                        'rgba(58, 123, 213, 0.7)',
                        'rgba(0, 209, 178, 0.7)',
                        'rgba(255, 221, 87, 0.7)',
                        'rgba(255, 56, 96, 0.7)',
                        'rgba(142, 68, 173, 0.7)',
                        'rgba(52, 152, 219, 0.7)',
                        'rgba(46, 204, 113, 0.7)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${context.label}: ${formatCurrency(value)} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * Update the Asset Diversity pie chart with current data
     */
    updateAssetDiversityChart() {
        if (!this.charts.assetDiversity) return;
        
        const years = this.dataStore.getYears();
        if (years.length === 0) return;
        
        const currentYear = years[0]; // Most recent year
        const assetCategories = this.dataStore.getAssetsByCategory(currentYear);
        
        const labels = Object.keys(assetCategories);
        const data = Object.values(assetCategories);
        
        this.charts.assetDiversity.data.labels = labels;
        this.charts.assetDiversity.data.datasets[0].data = data;
        this.charts.assetDiversity.update();
    }
    
    /**
     * Initialize the Net Worth Growth chart
     */
    initializeNetWorthGrowthChart() {
        const ctx = document.getElementById('net-worth-growth-chart');
        if (!ctx) return;
        
        // Destroy existing chart if it exists
        if (this.charts.netWorthGrowth) {
            this.charts.netWorthGrowth.destroy();
        }
        
        this.charts.netWorthGrowth = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Net Worth',
                        data: [],
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        yAxisID: 'y',
                        fill: true,
                        tension: 0.1
                    },
                    {
                        label: 'Growth Rate (%)',
                        data: [],
                        borderColor: 'rgba(255, 159, 64, 1)',
                        backgroundColor: 'rgba(255, 159, 64, 0)',
                        borderDash: [5, 5],
                        yAxisID: 'y1',
                        fill: false,
                        tension: 0
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return formatCurrency(value);
                            }
                        }
                    },
                    y1: {
                        position: 'right',
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            }
                        },
                        grid: {
                            drawOnChartArea: false
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                if (context.dataset.yAxisID === 'y') {
                                    return formatCurrency(context.raw);
                                } else {
                                    return context.raw.toFixed(1) + '%';
                                }
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * Update the Net Worth Growth chart with current data
     */
    updateNetWorthGrowthChart() {
        if (!this.charts.netWorthGrowth) return;
        
        const history = this.dataStore.getNetWorthHistory();
        if (history.length < 2) {
            // Not enough data for growth chart
            this.charts.netWorthGrowth.data.labels = ['Insufficient Data'];
            this.charts.netWorthGrowth.data.datasets[0].data = [0];
            this.charts.netWorthGrowth.data.datasets[1].data = [0];
            this.charts.netWorthGrowth.update();
            return;
        }
        
        // Sort by year ascending for chart
        history.sort((a, b) => a.year - b.year);
        
        const labels = history.map(item => item.year.toString());
        const netWorthData = history.map(item => item.netWorth);
        
        // Calculate growth rates
        const growthRates = [];
        netWorthData.forEach((value, index) => {
            if (index === 0) {
                growthRates.push(null); // No growth rate for first entry
            } else {
                const previousValue = netWorthData[index - 1];
                if (previousValue !== 0) {
                    const growthRate = ((value - previousValue) / Math.abs(previousValue)) * 100;
                    growthRates.push(growthRate);
                } else {
                    growthRates.push(0);
                }
            }
        });
        
        this.charts.netWorthGrowth.data.labels = labels;
        this.charts.netWorthGrowth.data.datasets[0].data = netWorthData;
        this.charts.netWorthGrowth.data.datasets[1].data = growthRates;
        this.charts.netWorthGrowth.update();
    }
    
    /**
     * Initialize the Asset Categories Time chart
     */
    initializeAssetCategoriesTimeChart() {
        const ctx = document.getElementById('asset-categories-time-chart');
        if (!ctx) return;
        
        // Destroy existing chart if it exists
        if (this.charts.assetCategoriesTime) {
            this.charts.assetCategoriesTime.destroy();
        }
        
        this.charts.assetCategoriesTime = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return formatCurrency(value);
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * Update the Asset Categories Time chart with current data
     */
    updateAssetCategoriesTimeChart() {
        if (!this.charts.assetCategoriesTime) return;
        
        // Get all years sorted chronologically
        const years = this.dataStore.getYears().sort((a, b) => a - b);
        if (years.length === 0) return;
        
        // Get all unique asset categories across all years
        const allCategories = new Set();
        
        years.forEach(year => {
            const categories = this.dataStore.getAssetsByCategory(year);
            Object.keys(categories).forEach(category => allCategories.add(category));
        });
        
        const categories = Array.from(allCategories);
        
        // Prepare data for each category
        const datasets = categories.map((category, index) => {
            const data = years.map(year => {
                const categories = this.dataStore.getAssetsByCategory(year);
                return categories[category] || 0;
            });
            
            // Get color based on index
            const colors = [
                'rgba(58, 123, 213, 0.7)',
                'rgba(0, 209, 178, 0.7)',
                'rgba(255, 221, 87, 0.7)',
                'rgba(255, 56, 96, 0.7)',
                'rgba(142, 68, 173, 0.7)',
                'rgba(52, 152, 219, 0.7)',
                'rgba(46, 204, 113, 0.7)'
            ];
            
            const colorIndex = index % colors.length;
            
            return {
                label: category,
                data: data,
                backgroundColor: colors[colorIndex],
                borderColor: colors[colorIndex],
                fill: false
            };
        });
        
        this.charts.assetCategoriesTime.data.labels = years.map(year => year.toString());
        this.charts.assetCategoriesTime.data.datasets = datasets;
        this.charts.assetCategoriesTime.update();
    }
    
    /**
     * Initialize the Growth vs Benchmarks chart
     */
    initializeGrowthVsBenchmarksChart() {
        const ctx = document.getElementById('growth-vs-benchmarks-chart');
        if (!ctx) return;
        
        // Destroy existing chart if it exists
        if (this.charts.growthVsBenchmarks) {
            this.charts.growthVsBenchmarks.destroy();
        }
        
        this.charts.growthVsBenchmarks = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Your Net Worth',
                        data: [],
                        borderColor: 'rgba(58, 123, 213, 1)',
                        backgroundColor: 'rgba(58, 123, 213, 0.1)',
                        fill: true,
                        tension: 0.1
                    },
                    {
                        label: 'Market Benchmark (7%)',
                        data: [],
                        borderColor: 'rgba(192, 192, 192, 1)',
                        borderDash: [5, 5],
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        fill: false,
                        tension: 0
                    },
                    {
                        label: 'Aggressive Growth (10%)',
                        data: [],
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderDash: [2, 2],
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        fill: false,
                        tension: 0
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return formatCurrency(value);
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * Update the Growth vs Benchmarks chart with current data
     */
    updateGrowthVsBenchmarksChart() {
        if (!this.charts.growthVsBenchmarks) return;
        
        // Get historical net worth data
        const history = this.dataStore.getNetWorthHistory();
        if (history.length < 2) {
            // Not enough data
            this.charts.growthVsBenchmarks.data.labels = ['Insufficient Data'];
            this.charts.growthVsBenchmarks.data.datasets.forEach(dataset => {
                dataset.data = [0];
            });
            this.charts.growthVsBenchmarks.update();
            return;
        }
        
        // Sort history by year
        history.sort((a, b) => a.year - b.year);
        
        const labels = history.map(item => item.year.toString());
        const netWorthData = history.map(item => item.netWorth);
        
        // Calculate benchmark growth at 7% annually starting from first year's net worth
        const benchmark7Data = [];
        const benchmark10Data = [];
        const startNetWorth = netWorthData[0];
        
        // Skip benchmark if starting net worth is not positive
        if (startNetWorth <= 0) {
            this.charts.growthVsBenchmarks.data.labels = ['Invalid Starting Point'];
            this.charts.growthVsBenchmarks.data.datasets.forEach(dataset => {
                dataset.data = [0];
            });
            this.charts.growthVsBenchmarks.update();
            return;
        }
        
        netWorthData.forEach((value, index) => {
            if (index === 0) {
                benchmark7Data.push(startNetWorth);
                benchmark10Data.push(startNetWorth);
            } else {
                const benchmark7Value = benchmark7Data[0] * Math.pow(1.07, index);
                const benchmark10Value = benchmark10Data[0] * Math.pow(1.10, index);
                benchmark7Data.push(benchmark7Value);
                benchmark10Data.push(benchmark10Value);
            }
        });
        
        this.charts.growthVsBenchmarks.data.labels = labels;
        this.charts.growthVsBenchmarks.data.datasets[0].data = netWorthData;
        this.charts.growthVsBenchmarks.data.datasets[1].data = benchmark7Data;
        this.charts.growthVsBenchmarks.data.datasets[2].data = benchmark10Data;
        this.charts.growthVsBenchmarks.update();
    }
    
    /**
     * Initialize salary growth chart
     */
    initializeSalaryGrowthChart() {
        const ctx = document.getElementById('salary-growth-chart');
        if (!ctx) return;
        
        // Destroy existing chart if it exists
        if (this.charts.salaryGrowth) {
            this.charts.salaryGrowth.destroy();
        }
        
        this.charts.salaryGrowth = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Salary',
                    data: [],
                    backgroundColor: 'rgba(58, 123, 213, 0.1)',
                    borderColor: 'rgba(58, 123, 213, 1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '£' + value.toLocaleString();
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return '£' + context.raw.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * Update salary growth chart
     */
    updateSalaryGrowthChart() {
        if (!this.charts.salaryGrowth) return;
        
        const chartData = this.dataStore.getSalaryChartData();
        
        this.charts.salaryGrowth.data.labels = chartData.labels;
        this.charts.salaryGrowth.data.datasets[0].data = chartData.data;
        
        this.charts.salaryGrowth.update();
    }
    
    /**
     * Render Salary Growth Chart
     */
    renderSalaryChart(canvasId, chartData) {
        const ctx = document.getElementById(canvasId);
        
        // Destroy existing chart if it exists
        if (this.charts[canvasId]) {
            this.charts[canvasId].destroy();
        }
        
        // Create new chart
        this.charts[canvasId] = new Chart(ctx, {
            type: 'line',
            data: {
                labels: chartData.labels,
                datasets: [{
                    label: 'Salary (£)',
                    data: chartData.data,
                    borderColor: '#3a7bd5',
                    backgroundColor: 'rgba(58, 123, 213, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: (value) => `£${value.toLocaleString()}`
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (context) => `Salary: £${context.raw.toLocaleString()}`
                        }
                    }
                }
            }
        });
    }
    
    /**
     * Render Savings Distribution Chart
     */
    renderSavingsDistributionChart(canvasId, categoriesData) {
        const ctx = document.getElementById(canvasId);
        
        // Destroy existing chart if it exists
        if (this.charts[canvasId]) {
            this.charts[canvasId].destroy();
        }
        
        // No data case
        if (Object.keys(categoriesData).length === 0) {
            const noDataCtx = ctx.getContext('2d');
            noDataCtx.font = '16px Arial';
            noDataCtx.textAlign = 'center';
            noDataCtx.fillText('No savings data available', ctx.width / 2, ctx.height / 2);
            return;
        }
        
        // Prepare data for chart
        const labels = Object.keys(categoriesData);
        const data = Object.values(categoriesData);
        const backgroundColor = [
            'rgba(58, 123, 213, 0.7)',   // Primary blue
            'rgba(0, 209, 178, 0.7)',    // Teal
            'rgba(255, 71, 87, 0.7)'     // Pink
        ];
        
        // Create new chart
        this.charts[canvasId] = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: backgroundColor,
                    borderColor: 'white',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                    },
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const label = context.label || '';
                                const value = context.raw;
                                const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${label}: £${value.toLocaleString()} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * Render Savings Timeline Chart
     */
    renderSavingsTimelineChart(canvasId, savingsData) {
        const ctx = document.getElementById(canvasId);
        
        // Destroy existing chart if it exists
        if (this.charts[canvasId]) {
            this.charts[canvasId].destroy();
        }
        
        // No data case
        if (savingsData.length === 0) {
            const noDataCtx = ctx.getContext('2d');
            noDataCtx.font = '16px Arial';
            noDataCtx.textAlign = 'center';
            noDataCtx.fillText('No savings data available', ctx.width / 2, ctx.height / 2);
            return;
        }
        
        // Sort data by date (oldest first)
        const sortedData = [...savingsData].sort((a, b) => new Date(a.date) - new Date(b.date));
        
        // Group data by month and category
        const groupedData = {};
        const categories = ['Emergency Fund', 'Stocks & Shares ISA', 'Other'];
        
        sortedData.forEach(entry => {
            const date = new Date(entry.date);
            const monthYear = `${date.getMonth() + 1}/${date.getFullYear()}`;
            
            if (!groupedData[monthYear]) {
                groupedData[monthYear] = {
                    'Emergency Fund': 0,
                    'Stocks & Shares ISA': 0,
                    'Other': 0
                };
            }
            
            groupedData[monthYear][entry.category] += entry.amount;
        });
        
        // Convert to chart format
        const labels = Object.keys(groupedData);
        const datasets = categories.map((category, index) => {
            // Different colors for different categories
            const colors = [
                'rgba(58, 123, 213, 0.7)',   // Blue for Emergency Fund
                'rgba(0, 209, 178, 0.7)',    // Teal for ISA
                'rgba(255, 71, 87, 0.7)'     // Pink for Other
            ];
            
            return {
                label: category,
                data: labels.map(month => groupedData[month][category]),
                backgroundColor: colors[index],
                borderColor: colors[index].replace('0.7', '1'),
                borderWidth: 1
            };
        });
        
        // Create new chart
        this.charts[canvasId] = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true,
                        beginAtZero: true,
                        ticks: {
                            callback: (value) => `£${value.toLocaleString()}`
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const label = context.dataset.label || '';
                                return `${label}: £${context.raw.toLocaleString()}`;
                            }
                        }
                    }
                }
            }
        });
    }
} 

----- dataStore.js -----
/**
 * Data Store Module
 * Handles all data operations and localStorage persistence
 */
export class DataStore {
    constructor() {
        this.data = {
            years: {},
            milestones: [],
            salaryHistory: [],
            savingsHistory: [],
            emergencyFundGoal: 3 // Default to 3 months
        };
    }
    
    /**
     * Load data from localStorage
     */
    loadData() {
        const savedData = localStorage.getItem('netWorthData');
        if (savedData) {
            try {
                this.data = JSON.parse(savedData);
                // Add savingsHistory array if it doesn't exist (backward compatibility)
                if (!this.data.savingsHistory) {
                    this.data.savingsHistory = [];
                }
                // Add emergencyFundGoal if it doesn't exist (backward compatibility)
                if (this.data.emergencyFundGoal === undefined) {
                    this.data.emergencyFundGoal = 3;
                }
            } catch (e) {
                this.initializeDefaultData();
            }
        } else {
            this.initializeDefaultData();
        }
    }
    
    /**
     * Save data to localStorage
     */
    saveData() {
        localStorage.setItem('netWorthData', JSON.stringify(this.data));
    }
    
    /**
     * Initialize with default data if nothing exists
     */
    initializeDefaultData() {
        const currentYear = new Date().getFullYear();
        this.data = {
            years: {
                [currentYear]: {
                    assets: [],
                    liabilities: []
                }
            },
            milestones: [
                { amount: 10000, name: "First £10K" },
                { amount: 50000, name: "£50K Milestone" },
                { amount: 100000, name: "Six Figure Club" }
            ],
            salaryHistory: [],
            savingsHistory: [],
            emergencyFundGoal: 3
        };
        this.saveData();
    }
    
    /**
     * Add a new year to track
     */
    addYear(year) {
        // Don't add if year already exists
        if (this.data.years[year]) {
            return false;
        }
        
        this.data.years[year] = {
            assets: [],
            liabilities: []
        };
        
        this.saveData();
        return true;
    }
    
    /**
     * Get sorted list of years
     */
    getYears() {
        return Object.keys(this.data.years)
            .map(year => parseInt(year, 10))
            .sort((a, b) => b - a); // Sort descending (newest first)
    }
    
    /**
     * Add a new asset to a specific year
     */
    addAsset(year, category, name, value) {
        if (!this.data.years[year]) {
            this.addYear(year);
        }
        
        const asset = {
            id: this.generateId(),
            category,
            name,
            value
        };
        
        this.data.years[year].assets.push(asset);
        this.saveData();
        return asset;
    }
    
    /**
     * Update an existing asset
     */
    updateAsset(year, assetId, updates) {
        if (!this.data.years[year]) return false;
        
        const assetIndex = this.data.years[year].assets.findIndex(asset => asset.id === assetId);
        if (assetIndex === -1) return false;
        
        this.data.years[year].assets[assetIndex] = {
            ...this.data.years[year].assets[assetIndex],
            ...updates
        };
        
        this.saveData();
        return true;
    }
    
    /**
     * Remove an asset
     */
    removeAsset(year, assetId) {
        if (!this.data.years[year]) return false;
        
        const initialLength = this.data.years[year].assets.length;
        this.data.years[year].assets = this.data.years[year].assets.filter(asset => asset.id !== assetId);
        
        if (initialLength !== this.data.years[year].assets.length) {
            this.saveData();
            return true;
        }
        
        return false;
    }
    
    /**
     * Get assets for a specific year
     */
    getAssets(year) {
        if (!this.data.years[year]) return [];
        return [...this.data.years[year].assets];
    }
    
    /**
     * Get total assets for a specific year
     */
    getTotalAssets(year) {
        if (!this.data.years[year]) return 0;
        
        return this.data.years[year].assets.reduce((total, asset) => {
            return total + asset.value;
        }, 0);
    }
    
    /**
     * Get assets grouped by category for a specific year
     */
    getAssetsByCategory(year) {
        if (!this.data.years[year]) return {};
        
        const categories = {};
        
        this.data.years[year].assets.forEach(asset => {
            if (!categories[asset.category]) {
                categories[asset.category] = 0;
            }
            categories[asset.category] += asset.value;
        });
        
        return categories;
    }
    
    /**
     * Add a new liability to a specific year
     */
    addLiability(year, category, value) {
        if (!this.data.years[year]) {
            this.addYear(year);
        }
        
        const liability = {
            id: this.generateId(),
            category,
            value
        };
        
        this.data.years[year].liabilities.push(liability);
        this.saveData();
        return liability;
    }
    
    /**
     * Update an existing liability
     */
    updateLiability(year, liabilityId, updates) {
        if (!this.data.years[year]) return false;
        
        const liabilityIndex = this.data.years[year].liabilities.findIndex(liability => liability.id === liabilityId);
        if (liabilityIndex === -1) return false;
        
        this.data.years[year].liabilities[liabilityIndex] = {
            ...this.data.years[year].liabilities[liabilityIndex],
            ...updates
        };
        
        this.saveData();
        return true;
    }
    
    /**
     * Remove a liability
     */
    removeLiability(year, liabilityId) {
        if (!this.data.years[year]) return false;
        
        const initialLength = this.data.years[year].liabilities.length;
        this.data.years[year].liabilities = this.data.years[year].liabilities.filter(liability => liability.id !== liabilityId);
        
        if (initialLength !== this.data.years[year].liabilities.length) {
            this.saveData();
            return true;
        }
        
        return false;
    }
    
    /**
     * Get liabilities for a specific year
     */
    getLiabilities(year) {
        if (!this.data.years[year]) return [];
        return [...this.data.years[year].liabilities];
    }
    
    /**
     * Get total liabilities for a specific year
     */
    getTotalLiabilities(year) {
        if (!this.data.years[year]) return 0;
        
        return this.data.years[year].liabilities.reduce((total, liability) => {
            return total + liability.value;
        }, 0);
    }
    
    /**
     * Get liabilities grouped by category for a specific year
     */
    getLiabilitiesByCategory(year) {
        if (!this.data.years[year]) return {};
        
        const categories = {};
        
        this.data.years[year].liabilities.forEach(liability => {
            if (!categories[liability.category]) {
                categories[liability.category] = 0;
            }
            categories[liability.category] += liability.value;
        });
        
        return categories;
    }
    
    /**
     * Calculate net worth for a specific year
     */
    getNetWorth(year) {
        const totalAssets = this.getTotalAssets(year);
        const totalLiabilities = this.getTotalLiabilities(year);
        
        return totalAssets - totalLiabilities;
    }
    
    /**
     * Get debt-to-asset ratio for a specific year
     */
    getDebtToAssetRatio(year) {
        const totalAssets = this.getTotalAssets(year);
        const totalLiabilities = this.getTotalLiabilities(year);
        
        if (totalAssets === 0) return 0;
        
        return (totalLiabilities / totalAssets) * 100;
    }
    
    /**
     * Get historical net worth data for all years
     */
    getNetWorthHistory() {
        const years = this.getYears().sort((a, b) => a - b); // Sort ascending for charts
        
        return years.map(year => {
            return {
                year,
                netWorth: this.getNetWorth(year),
                assets: this.getTotalAssets(year),
                liabilities: this.getTotalLiabilities(year)
            };
        });
    }
    
    /**
     * Get year-over-year growth percentage data
     */
    getGrowthPercentages() {
        const history = this.getNetWorthHistory();
        
        if (history.length <= 1) {
            return [];
        }
        
        return history.slice(1).map((current, index) => {
            const previous = history[index];
            const previousNetWorth = previous.netWorth;
            const currentNetWorth = current.netWorth;
            
            let growthPercentage = 0;
            
            if (previousNetWorth > 0) {
                growthPercentage = ((currentNetWorth - previousNetWorth) / Math.abs(previousNetWorth)) * 100;
            } else if (previousNetWorth < 0 && currentNetWorth >= 0) {
                // If previous was negative and current is positive or zero, show positive growth
                growthPercentage = 100;
            } else if (previousNetWorth < 0 && currentNetWorth < 0) {
                // If both are negative, calculate improvement percentage
                growthPercentage = ((Math.abs(previousNetWorth) - Math.abs(currentNetWorth)) / Math.abs(previousNetWorth)) * 100;
            } else if (previousNetWorth === 0 && currentNetWorth > 0) {
                // From zero to positive
                growthPercentage = 100;
            } else if (previousNetWorth === 0 && currentNetWorth < 0) {
                // From zero to negative
                growthPercentage = -100;
            }
            
            return {
                year: current.year,
                growthPercentage: parseFloat(growthPercentage.toFixed(2))
            };
        });
    }
    
    /**
     * Add a new milestone
     */
    addMilestone(amount, name) {
        const milestone = {
            id: this.generateId(),
            amount,
            name,
            achieved: false
        };
        
        this.data.milestones.push(milestone);
        this.updateMilestoneStatus();
        this.saveData();
        return milestone;
    }
    
    /**
     * Remove a milestone
     */
    removeMilestone(milestoneId) {
        const initialLength = this.data.milestones.length;
        this.data.milestones = this.data.milestones.filter(milestone => milestone.id !== milestoneId);
        
        if (initialLength !== this.data.milestones.length) {
            this.saveData();
            return true;
        }
        
        return false;
    }
    
    /**
     * Get all milestones
     */
    getMilestones() {
        return [...this.data.milestones].sort((a, b) => a.amount - b.amount);
    }
    
    /**
     * Update milestone achieved status based on current net worth
     */
    updateMilestoneStatus() {
        const currentYear = Math.max(...this.getYears());
        const currentNetWorth = this.getNetWorth(currentYear);
        
        this.data.milestones.forEach(milestone => {
            milestone.achieved = currentNetWorth >= milestone.amount;
        });
        
        this.saveData();
    }
    
    /**
     * Generate a unique ID
     */
    generateId() {
        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    }
    
    /**
     * Add a new salary entry to the history
     */
    addSalaryEntry(date, company, amount) {
        const newEntry = {
            id: this.generateId(),
            date,
            company,
            amount,
            increasePercent: 0 // Will be calculated
        };
        
        // Sort entries by date (most recent first)
        let sortedEntries = [...this.data.salaryHistory, newEntry]
            .sort((a, b) => new Date(b.date) - new Date(a.date));
        
        // Calculate increase percentage if not the first entry
        if (sortedEntries.length > 1) {
            // Current entry is at index 0 (newest), previous is at index 1
            const previousSalary = sortedEntries[1].amount;
            sortedEntries[0].increasePercent = ((sortedEntries[0].amount - previousSalary) / previousSalary) * 100;
        }
        
        // Update all entries with recalculated percentages
        this.data.salaryHistory = sortedEntries;
        this.saveData();
        return newEntry;
    }
    
    /**
     * Update an existing salary entry
     */
    updateSalaryEntry(entryId, updates) {
        const entryIndex = this.data.salaryHistory.findIndex(entry => entry.id === entryId);
        if (entryIndex === -1) return false;
        
        // Update entry with new data
        this.data.salaryHistory[entryIndex] = {
            ...this.data.salaryHistory[entryIndex],
            ...updates
        };
        
        // Sort entries again by date
        this.data.salaryHistory.sort((a, b) => new Date(b.date) - new Date(a.date));
        
        // Recalculate all increase percentages
        for (let i = 0; i < this.data.salaryHistory.length; i++) {
            if (i === this.data.salaryHistory.length - 1) {
                // First (oldest) entry has no previous to compare to
                this.data.salaryHistory[i].increasePercent = 0;
            } else {
                const currentSalary = this.data.salaryHistory[i].amount;
                const previousSalary = this.data.salaryHistory[i + 1].amount;
                this.data.salaryHistory[i].increasePercent = ((currentSalary - previousSalary) / previousSalary) * 100;
            }
        }
        
        this.saveData();
        return true;
    }
    
    /**
     * Remove a salary entry
     */
    removeSalaryEntry(entryId) {
        const initialLength = this.data.salaryHistory.length;
        this.data.salaryHistory = this.data.salaryHistory.filter(entry => entry.id !== entryId);
        
        if (initialLength !== this.data.salaryHistory.length) {
            // Recalculate all increase percentages if entries remain
            if (this.data.salaryHistory.length > 0) {
                // Ensure entries are sorted by date (newest first)
                this.data.salaryHistory.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                for (let i = 0; i < this.data.salaryHistory.length; i++) {
                    if (i === this.data.salaryHistory.length - 1) {
                        // First (oldest) entry has no previous to compare to
                        this.data.salaryHistory[i].increasePercent = 0;
                    } else {
                        const currentSalary = this.data.salaryHistory[i].amount;
                        const previousSalary = this.data.salaryHistory[i + 1].amount;
                        this.data.salaryHistory[i].increasePercent = ((currentSalary - previousSalary) / previousSalary) * 100;
                    }
                }
            }
            
            this.saveData();
            return true;
        }
        
        return false;
    }
    
    /**
     * Get all salary entries
     */
    getSalaryHistory() {
        return [...this.data.salaryHistory];
    }
    
    /**
     * Get formatted data for the salary chart
     */
    getSalaryChartData() {
        // Sort by date (oldest first for the chart)
        const sortedEntries = [...this.data.salaryHistory]
            .sort((a, b) => new Date(a.date) - new Date(b.date));
        
        return {
            labels: sortedEntries.map(entry => {
                const date = new Date(entry.date);
                return `${date.getMonth() + 1}/${date.getFullYear()}`;
            }),
            data: sortedEntries.map(entry => entry.amount)
        };
    }
    
    /**
     * Add a monthly savings entry
     */
    addSavingsEntry(date, amount, category, notes) {
        const newEntry = {
            id: this.generateId(),
            date,
            amount: parseFloat(amount),
            category,
            notes
        };
        
        this.data.savingsHistory.push(newEntry);
        
        // Sort entries by date (most recent first)
        this.data.savingsHistory.sort((a, b) => new Date(b.date) - new Date(a.date));
        
        this.saveData();
        return newEntry;
    }
    
    /**
     * Update an existing savings entry
     */
    updateSavingsEntry(entryId, updates) {
        const entryIndex = this.data.savingsHistory.findIndex(entry => entry.id === entryId);
        if (entryIndex === -1) return false;
        
        // Update entry with new data
        this.data.savingsHistory[entryIndex] = {
            ...this.data.savingsHistory[entryIndex],
            ...updates
        };
        
        // Re-sort entries by date (most recent first)
        this.data.savingsHistory.sort((a, b) => new Date(b.date) - new Date(a.date));
        
        this.saveData();
        return true;
    }
    
    /**
     * Remove a savings entry
     */
    removeSavingsEntry(entryId) {
        const initialLength = this.data.savingsHistory.length;
        this.data.savingsHistory = this.data.savingsHistory.filter(entry => entry.id !== entryId);
        
        if (initialLength !== this.data.savingsHistory.length) {
            this.saveData();
            return true;
        }
        
        return false;
    }
    
    /**
     * Get all savings entries
     */
    getSavingsHistory() {
        return [...this.data.savingsHistory];
    }
    
    /**
     * Get savings data grouped by category
     */
    getSavingsByCategory() {
        const categories = {};
        
        this.data.savingsHistory.forEach(entry => {
            if (!categories[entry.category]) {
                categories[entry.category] = 0;
            }
            categories[entry.category] += entry.amount;
        });
        
        return categories;
    }
    
    /**
     * Calculate savings percentage based on most recent salary
     */
    calculateSavingsPercentage(personalContributionPercent, employerContributionPercent) {
        // Get most recent salary
        const sortedSalaries = [...this.data.salaryHistory]
            .sort((a, b) => new Date(b.date) - new Date(a.date));
        
        if (sortedSalaries.length === 0) {
            return 0;
        }
        
        const recentSalary = sortedSalaries[0].amount;
        
        // Get total monthly savings
        const totalMonthlySavings = this.getTotalMonthlySavings();
        
        // Calculate pension contributions
        const personalPensionContribution = (recentSalary / 12) * (personalContributionPercent / 100);
        const employerPensionContribution = (recentSalary / 12) * (employerContributionPercent / 100);
        
        // Calculate total savings percentage
        const totalMonthlyIncome = recentSalary / 12;
        const totalSavings = totalMonthlySavings + personalPensionContribution + employerPensionContribution;
        
        return (totalSavings / totalMonthlyIncome) * 100;
    }
    
    /**
     * Get total monthly savings average
     */
    getTotalMonthlySavings() {
        // Get entries from the last 3 months
        const threeMonthsAgo = new Date();
        threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
        
        const recentEntries = this.data.savingsHistory.filter(entry => 
            new Date(entry.date) >= threeMonthsAgo
        );
        
        if (recentEntries.length === 0) {
            return 0;
        }
        
        // Calculate the total
        const total = recentEntries.reduce((sum, entry) => sum + entry.amount, 0);
        
        // Return monthly average
        return total / Math.min(3, recentEntries.length);
    }
    
    /**
     * Set emergency fund goal (in months)
     */
    setEmergencyFundGoal(months) {
        this.data.emergencyFundGoal = months;
        this.saveData();
    }
    
    /**
     * Get emergency fund goal (in months)
     */
    getEmergencyFundGoal() {
        return this.data.emergencyFundGoal;
    }
} 

----- direct-ui.js -----
/**
 * DEPRECATED: Direct UI Module
 * This file is kept for backward compatibility and will redirect to new modular system
 */

// Display console warning about the deprecated file
console.warn('direct-ui.js is deprecated and will be removed in a future version. Please use the modular JS files instead.');

// When this script loads, redirect to the new structure
document.addEventListener('DOMContentLoaded', function() {
    console.info('Loading modular JS structure...');
    
    // The new structure is loaded via module imports in main.js
});

// Proxy functions for backward compatibility
// These will simply pass-through to the new modular functions

// Define a global namespace for backward compatibility if needed
window.NetWorthTracker = window.NetWorthTracker || {};

// Define empty dummy functions that won't throw errors if called
const dummyFunctions = [
    'setupDirectUI',
    'setupSettingsIcon',
    'getCurrentData',
    'saveData',
    'showDataManagementModal',
    'setupDataManagementActions',
    'renderFinancialTables',
    'renderAssetsTable',
    'renderLiabilitiesTable',
    'updateTotals',
    'editItem',
    'deleteItem',
    'updateDashboardSummary',
    'renderDashboardCharts',
    'renderNetWorthChart',
    'renderAssetDiversityChart',
    'renderTrendsCharts',
    'renderNetWorthGrowthChart',
    'renderAssetCategoriesOverTimeChart',
    'renderGrowthVsBenchmarksChart',
    'renderMilestones',
    'deleteMilestone',
    'renderSalaryTable',
    'editSalaryEntry',
    'deleteSalaryEntry',
    'renderSalaryChart',
    'setupBudgetingCalculators',
    'renderJointExpensesChart',
    'formatCurrency'
];

// Create dummy functions that log warnings
dummyFunctions.forEach(funcName => {
    window.NetWorthTracker[funcName] = function() {
        console.warn(`The function '${funcName}' is deprecated. Use the new modular structure instead.`);
        return null; // Return null to prevent undefined errors
    };
});

// No-op function as entry point to avoid errors
function setupDirectUI() {
    console.warn('setupDirectUI is deprecated. Use the new modular structure instead.');
} 

----- import-export.js -----
/**
 * Test script to debug JavaScript loading issues
 */
console.log('TEST-SCRIPT.JS LOADED');

// Function to test settings button
function testSettingsButton() {
    console.log('Testing settings button functionality');
    
    const settingsBtn = document.getElementById('settings-icon');
    console.log('Settings button found?', settingsBtn);
    
    if (settingsBtn) {
        // Remove any existing click listeners
        const newBtn = settingsBtn.cloneNode(true);
        settingsBtn.parentNode.replaceChild(newBtn, settingsBtn);
        
        // Add our test click handler
        newBtn.addEventListener('click', function(event) {
            console.log('Settings button clicked in test-script.js');
            
            // Create and show a simple modal
            const modal = document.getElementById('modal-container');
            const modalBody = document.getElementById('modal-body');
            
            if (modal && modalBody) {
                console.log('Modal elements found, showing test modal');
                
                // Set content for data import/export
                modalBody.innerHTML = `
                    <h2>Data Management</h2>
                    <p>Export your data as JSON to back it up, or import previously exported data.</p>
                    
                    <div class="tabs">
                        <button class="tab-button active" data-tab="export">Export Data</button>
                        <button class="tab-button" data-tab="import">Import Data</button>
                    </div>
                    
                    <div class="tab-content active" id="export-tab">
                        <p>Copy the JSON data below to save it:</p>
                        <textarea id="export-data" rows="10" readonly>${JSON.stringify(localStorage.getItem('netWorthData') || '{}', null, 2)}</textarea>
                        <div class="form-actions">
                            <button id="copy-data" class="save-btn">Copy to Clipboard</button>
                            <button id="download-data" class="save-btn">Download as File</button>
                        </div>
                    </div>
                    
                    <div class="tab-content" id="import-tab" style="display: none;">
                        <p>Paste your previously exported JSON data below:</p>
                        <textarea id="import-data" rows="10" placeholder="Paste your backup data here..."></textarea>
                        <div class="form-actions">
                            <button id="cancel-import" class="cancel-btn">Cancel</button>
                            <button id="import-data-btn" class="save-btn">Import Data</button>
                        </div>
                    </div>
                `;
                
                // Show modal
                modal.style.display = 'flex';
                modal.style.visibility = 'visible';
                modal.style.opacity = '1';
                modal.classList.remove('modal-hidden');
                modal.classList.add('modal-visible');
                
                // Set up tab switching
                const tabButtons = document.querySelectorAll('.tab-button');
                const tabContents = document.querySelectorAll('.tab-content');
                
                tabButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        const targetTab = button.getAttribute('data-tab');
                        console.log('Tab button clicked:', targetTab);
                        
                        // Update active tab button
                        tabButtons.forEach(btn => btn.classList.remove('active'));
                        button.classList.add('active');
                        
                        // Show target tab content, hide others
                        tabContents.forEach(content => {
                            if (content.id === `${targetTab}-tab`) {
                                content.style.display = 'block';
                            } else {
                                content.style.display = 'none';
                            }
                        });
                    });
                });
                
                // Add close button functionality
                const closeBtn = document.querySelector('.close-modal');
                if (closeBtn) {
                    closeBtn.addEventListener('click', function() {
                        modal.classList.add('modal-hidden');
                        modal.classList.remove('modal-visible');
                    });
                }
                
                // Copy to clipboard
                const copyButton = document.getElementById('copy-data');
                if (copyButton) {
                    copyButton.addEventListener('click', () => {
                        const exportDataElement = document.getElementById('export-data');
                        exportDataElement.select();
                        document.execCommand('copy');
                        copyButton.textContent = 'Copied!';
                        setTimeout(() => {
                            copyButton.textContent = 'Copy to Clipboard';
                        }, 2000);
                    });
                }
                
                // Prevent other handlers from running
                event.stopPropagation();
            } else {
                console.error('Modal elements not found:', { modal, modalBody });
                alert('Modal elements not found! Check console for details.');
            }
        });
    }
}

// Run when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded in test-script.js');
    testSettingsButton();
});

// Also try immediately
console.log('Running testSettingsButton immediately');
testSettingsButton(); 

----- main.js -----
console.log('MAIN.JS LOADED - BEFORE IMPORTS');

/**
 * Main Application
 * Entry point for the Net Worth Tracker application
 */
import { initYearManager } from './modules/yearManagerUI.js';
import { updateDashboardSummary } from './modules/dashboardUI.js';
import { renderDashboardCharts, renderTrendsCharts } from './modules/chartsUI.js';
import { initMilestonesUI } from './modules/milestonesUI.js';
import { initSalaryTrackerUI } from './modules/salaryTrackerUI.js';
import { initSettingsIcon } from './modules/dataManagementUI.js';
import { initFormHandlers } from './modules/formHandlerUI.js';

console.log('MAIN.JS LOADED - AFTER IMPORTS');

// Main initialization function
function initializeApp() {
    console.log('Initializing application...');
    
    // Set up UI tabs
    initTabs();
    
    // Initialize year management
    initYearManager();
    
    // Initialize dashboard components
    updateDashboardSummary();
    renderDashboardCharts();
    
    // Initialize other modules
    initMilestonesUI();
    initSalaryTrackerUI();
    initFormHandlers();
    
    // Initialize data management
    initSettingsIcon();
    
    // Initialize event handler for refresh trends button
    const refreshTrendsBtn = document.getElementById('refresh-trends-btn');
    if (refreshTrendsBtn) {
        refreshTrendsBtn.addEventListener('click', renderTrendsCharts);
    }
    
    // Initial rendering of trends charts
    renderTrendsCharts();
    
    console.log('Application initialization complete');
}

// Handle tab switching
function initTabs() {
    const tabLinks = document.querySelectorAll('#main-nav a');
    
    tabLinks.forEach(tabLink => {
        tabLink.addEventListener('click', function (event) {
            event.preventDefault();
            
            // Get target section id
            const targetId = this.getAttribute('href').substring(1);
            
            // Hide all sections
            document.querySelectorAll('main > section').forEach(section => {
                section.classList.add('hidden-section');
                section.classList.remove('active-section');
            });
            
            // Show target section
            const targetSection = document.getElementById(targetId);
            if (targetSection) {
                targetSection.classList.remove('hidden-section');
                targetSection.classList.add('active-section');
            }
            
            // Update active tab
            tabLinks.forEach(link => link.classList.remove('active'));
            this.classList.add('active');
            
            // Update charts when switching to tabs with charts
            if (targetId === 'dashboard') {
                renderDashboardCharts();
            } else if (targetId === 'trends') {
                renderTrendsCharts();
            }
        });
    });
}

// Initialize the application when DOM is fully loaded
console.log('Setting up DOMContentLoaded event listener');
document.addEventListener('DOMContentLoaded', initializeApp);

// Handle year selection changes globally
document.addEventListener('yearChanged', function(e) {
    if (e.detail && e.detail.year) {
        // Update UI based on selected year
        updateDashboardSummary();
        renderDashboardCharts();
    }
}); 

----- modal-fix.js -----
// Modal Fix Script - ensures modals display correctly

// Helper function to generate unique IDs
function generateId() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

document.addEventListener('DOMContentLoaded', () => {
    // Ensure modal functionality works
    const modalContainer = document.getElementById('modal-container');
    
    if (!modalContainer) {
        return;
    }
    
    // Override modal display methods for compatibility with section isolation
    window.showModal = function(content, modalType) {
        const modalContainer = document.getElementById('modal-container');
        const modalBody = document.getElementById('modal-body');
        
        if (!modalContainer || !modalBody) {
            return;
        }
        
        if (content) {
            modalBody.innerHTML = content;
            
            // Set up action button event listeners based on modal type
            setupModalActions(modalType);
        }
        
        // APPROACH FROM TOGGLE MODAL - Using multiple techniques for maximum reliability
        
        // 1. Apply classes
        modalContainer.classList.remove('modal-hidden');
        modalContainer.classList.add('modal-visible');
        
        // 2. Apply inline styles with !important
        modalContainer.style.cssText = `
            display: flex !important;
            visibility: visible !important;
            opacity: 1 !important;
            pointer-events: auto !important;
            position: fixed !important;
            top: 0 !important;
            left: 0 !important;
            width: 100% !important;
            height: 100% !important;
            background-color: rgba(0, 0, 0, 0.5) !important;
            z-index: 10000 !important;
            justify-content: center !important;
            align-items: center !important;
        `;
        
        // 3. Create and inject a style tag for additional override
        let styleTag = document.getElementById('force-modal-style');
        if (!styleTag) {
            styleTag = document.createElement('style');
            styleTag.id = 'force-modal-style';
            document.head.appendChild(styleTag);
        }
        styleTag.textContent = `
            #modal-container {
                display: flex !important;
                visibility: visible !important;
                opacity: 1 !important;
                pointer-events: auto !important;
                position: fixed !important;
                top: 0 !important;
                left: 0 !important;
                width: 100% !important;
                height: 100% !important;
            }
            #modal-container .modal-content {
                opacity: 1 !important;
                visibility: visible !important;
            }
        `;
        
        // 4. Force body style to prevent scrolling
        document.body.style.overflow = 'hidden';
    };
    
    window.hideModal = function() {
        const modalContainer = document.getElementById('modal-container');
        if (!modalContainer) {
            return;
        }
        
        // APPROACH FROM TOGGLE MODAL - Using multiple techniques for maximum reliability
        
        // 1. Remove classes
        modalContainer.classList.add('modal-hidden');
        modalContainer.classList.remove('modal-visible');
        
        // 2. Apply inline styles with !important
        modalContainer.style.cssText = `
            display: none !important;
            visibility: hidden !important;
            opacity: 0 !important;
            pointer-events: none !important;
        `;
        
        // 3. Update the style override
        let styleTag = document.getElementById('force-modal-style');
        if (styleTag) {
            styleTag.textContent = `
                #modal-container {
                    display: none !important;
                    visibility: hidden !important;
                    opacity: 0 !important;
                    pointer-events: none !important;
                }
            `;
        }
        
        // 4. Restore body scrolling
        document.body.style.overflow = '';
    };
    
    // Function to set up action buttons based on modal type
    function setupModalActions(modalType) {
        // Set up common cancel buttons that just close the modal
        const cancelButtons = document.querySelectorAll('.cancel-btn');
        cancelButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                window.hideModal();
            });
        });
        
        // Set up specific action buttons based on modal type
        switch(modalType) {
            case 'add-year':
                setupAddYearActions();
                break;
            case 'add-asset':
                setupAddAssetActions();
                break;
            case 'add-liability':
                setupAddLiabilityActions();
                break;
            case 'add-milestone':
                setupAddMilestoneActions();
                break;
            case 'add-salary':
                setupAddSalaryActions();
                break;
            case 'data-management':
                // The data management module will handle its own actions
                console.log('Data management modal opened');
                break;
            case 'edit-asset':
                // Edit asset handlers are set up in direct-ui.js
                break;
            case 'edit-liability':
                // Edit liability handlers are set up in direct-ui.js
                break;
            case 'delete-item':
                // Delete handlers are set up in direct-ui.js
                break;
            case 'delete-milestone':
                // Delete milestone handlers are set up in direct-ui.js
                break;
        }
    }
    
    // Force reload page to ensure UI refresh after data changes
    function reloadPageAfterDelay(delay = 300) {
        window.hideModal();
        setTimeout(() => {
            window.location.reload();
        }, delay);
    }
    
    function setupAddYearActions() {
        const saveYearBtn = document.getElementById('save-year');
        if (saveYearBtn) {
            saveYearBtn.addEventListener('click', () => {
                const yearInput = document.getElementById('new-year');
                const year = parseInt(yearInput.value, 10);
                
                if (year && year >= 1900 && year <= 2100) {
                    // Try to add year using the dataStore if available
                    try {
                        if (window.appInstance && window.appInstance.dataStore) {
                            window.appInstance.dataStore.addYear(year);
                            window.appInstance.ui.renderYearSelector();
                        } else {
                            // Fallback: Create the year in localStorage with correct format
                            let data = JSON.parse(localStorage.getItem('netWorthData') || '{}');
                            
                            // Initialize data structure if it doesn't exist
                            if (!data.years) data.years = {};
                            if (!data.milestones) data.milestones = [];
                            
                            // Check if the year already exists
                            if (!data.years[year]) {
                                // Add the year with the correct format
                                data.years[year] = {
                                    assets: [],
                                    liabilities: []
                                };
                                
                                localStorage.setItem('netWorthData', JSON.stringify(data));
                                
                                // Now update the year selector directly
                                const yearSelect = document.getElementById('year-select');
                                if (yearSelect) {
                                    // Create a new option element
                                    const option = document.createElement('option');
                                    option.value = year.toString();
                                    option.textContent = year.toString();
                                    
                                    // Add the option to the select element
                                    yearSelect.appendChild(option);
                                    
                                    // Sort the options by year (descending) to have most recent years first
                                    const options = Array.from(yearSelect.options);
                                    options.sort((a, b) => parseInt(b.value) - parseInt(a.value));
                                    yearSelect.innerHTML = '';
                                    options.forEach(option => yearSelect.appendChild(option));
                                    
                                    // Select the most recent year (which should be this new one)
                                    const mostRecentYear = options[0].value;
                                    yearSelect.value = mostRecentYear;
                                    
                                    // Trigger a change event to update displays
                                    const event = new Event('change');
                                    yearSelect.dispatchEvent(event);
                                }
                            } else {
                                // Sort and select the most recent year
                                const yearSelect = document.getElementById('year-select');
                                if (yearSelect) {
                                    // Sort the options by year (descending)
                                    const options = Array.from(yearSelect.options);
                                    options.sort((a, b) => parseInt(b.value) - parseInt(a.value));
                                    yearSelect.innerHTML = '';
                                    options.forEach(option => yearSelect.appendChild(option));
                                    
                                    // Select the most recent year
                                    const mostRecentYear = options[0].value;
                                    yearSelect.value = mostRecentYear;
                                    
                                    // Trigger a change event to update displays
                                    const event = new Event('change');
                                    yearSelect.dispatchEvent(event);
                                }
                            }
                        }
                        
                        // Hide the modal
                        window.hideModal();
                    } catch (error) {
                        alert('Error adding year: ' + error.message);
                        window.hideModal();
                    }
                } else {
                    alert('Please enter a valid year between 1900 and 2100');
                }
            });
        }
    }
    
    function setupAddAssetActions() {
        const saveAssetBtn = document.getElementById('save-asset');
        if (saveAssetBtn) {
            saveAssetBtn.addEventListener('click', () => {
                const category = document.getElementById('asset-category').value;
                const name = document.getElementById('asset-name').value;
                const valueInput = document.getElementById('asset-value').value;
                const value = parseFloat(valueInput);
                
                if (category && name && !isNaN(value) && value >= 0) {
                    try {
                        const yearSelect = document.getElementById('year-select');
                        const currentYear = yearSelect ? yearSelect.value : new Date().getFullYear().toString();
                        
                        if (window.appInstance && window.appInstance.dataStore) {
                            window.appInstance.dataStore.addAsset(currentYear, category, name, value);
                            window.appInstance.ui.renderFinancialTables();
                            window.appInstance.ui.renderDashboardSummary();
                            if (window.appInstance.chartManager) {
                                window.appInstance.chartManager.updateAllCharts();
                            }
                        } else {
                            // Fallback: Add directly to localStorage with correct format
                            let data = JSON.parse(localStorage.getItem('netWorthData') || '{}');
                            
                            // Initialize data structure if it doesn't exist
                            if (!data.years) data.years = {};
                            if (!data.milestones) data.milestones = [];
                            
                            // Ensure the year exists
                            if (!data.years[currentYear]) {
                                data.years[currentYear] = { assets: [], liabilities: [] };
                            }
                            
                            // Add the asset with the correct format
                            const newAsset = {
                                id: Date.now().toString(),
                                category: category,
                                name: name,
                                value: value
                            };
                            
                            data.years[currentYear].assets.push(newAsset);
                            localStorage.setItem('netWorthData', JSON.stringify(data));
                            
                            // Trigger direct UI update
                            window.hideModal();
                            
                            // Notify that year data was updated
                            document.dispatchEvent(new CustomEvent('yearDataUpdated', { 
                                detail: { year: currentYear } 
                            }));
                            return;
                        }
                        
                        window.hideModal();
                    } catch (error) {
                        alert('Error adding asset: ' + error.message);
                        window.hideModal();
                    }
                } else {
                    alert('Please fill all fields with valid values');
                }
            });
        }
    }
    
    function setupAddLiabilityActions() {
        const saveLiabilityBtn = document.getElementById('save-liability');
        if (saveLiabilityBtn) {
            saveLiabilityBtn.addEventListener('click', () => {
                const category = document.getElementById('liability-category').value;
                const valueInput = document.getElementById('liability-value').value;
                const value = parseFloat(valueInput);
                
                if (category && !isNaN(value) && value >= 0) {
                    try {
                        const yearSelect = document.getElementById('year-select');
                        const currentYear = yearSelect ? yearSelect.value : new Date().getFullYear().toString();
                        
                        if (window.appInstance && window.appInstance.dataStore) {
                            window.appInstance.dataStore.addLiability(currentYear, category, value);
                            window.appInstance.ui.renderFinancialTables();
                            window.appInstance.ui.renderDashboardSummary();
                            if (window.appInstance.chartManager) {
                                window.appInstance.chartManager.updateAllCharts();
                            }
                        } else {
                            // Fallback: Add directly to localStorage with correct format
                            let data = JSON.parse(localStorage.getItem('netWorthData') || '{}');
                            
                            // Initialize data structure if it doesn't exist
                            if (!data.years) data.years = {};
                            if (!data.milestones) data.milestones = [];
                            
                            // Ensure the year exists
                            if (!data.years[currentYear]) {
                                data.years[currentYear] = { assets: [], liabilities: [] };
                            }
                            
                            // Add the liability with the correct format
                            const newLiability = {
                                id: Date.now().toString(),
                                category: category,
                                value: value
                            };
                            
                            data.years[currentYear].liabilities.push(newLiability);
                            localStorage.setItem('netWorthData', JSON.stringify(data));
                            
                            // Trigger direct UI update
                            window.hideModal();
                            
                            // Notify that year data was updated
                            document.dispatchEvent(new CustomEvent('yearDataUpdated', { 
                                detail: { year: currentYear } 
                            }));
                            return;
                        }
                        
                        window.hideModal();
                    } catch (error) {
                        alert('Error adding liability: ' + error.message);
                        window.hideModal();
                    }
                } else {
                    alert('Please fill all fields with valid values');
                }
            });
        }
    }
    
    function setupAddMilestoneActions() {
        const saveMilestoneBtn = document.getElementById('save-milestone');
        if (saveMilestoneBtn) {
            saveMilestoneBtn.addEventListener('click', () => {
                const amountInput = document.getElementById('milestone-amount').value;
                const name = document.getElementById('milestone-name').value;
                const amount = parseFloat(amountInput);
                
                if (!isNaN(amount) && amount > 0 && name) {
                    try {
                        if (window.appInstance && window.appInstance.dataStore) {
                            window.appInstance.dataStore.addMilestone(amount, name);
                            window.appInstance.ui.renderMilestones();
                        } else {
                            // Fallback: Add directly to localStorage with correct format
                            let data = JSON.parse(localStorage.getItem('netWorthData') || '{}');
                            
                            // Initialize data structure if it doesn't exist
                            if (!data.years) data.years = {};
                            if (!data.milestones) data.milestones = [];
                            
                            // Add the milestone
                            data.milestones.push({
                                id: generateId(),
                                amount: amount,
                                name: name
                            });
                            
                            // Sort milestones by amount
                            data.milestones.sort((a, b) => a.amount - b.amount);
                            
                            localStorage.setItem('netWorthData', JSON.stringify(data));
                        }
                        
                        // Hide the modal
                        window.hideModal();
                    } catch (error) {
                        alert('Error adding milestone: ' + error.message);
                        window.hideModal();
                    }
                } else {
                    alert('Please enter a valid amount and name');
                }
            });
        }
    }
    
    function setupAddSalaryActions() {
        const saveSalaryBtn = document.getElementById('save-salary');
        if (saveSalaryBtn) {
            saveSalaryBtn.addEventListener('click', () => {
                const dateInput = document.getElementById('salary-date').value;
                const company = document.getElementById('salary-company').value;
                const title = document.getElementById('salary-title').value;
                const amountInput = document.getElementById('salary-amount').value;
                const amount = parseFloat(amountInput);
                
                if (dateInput && company && title && !isNaN(amount) && amount >= 0) {
                    try {
                        // Convert the input (YYYY-MM) to a Date object
                        const date = new Date(dateInput);
                        
                        if (window.appInstance && window.appInstance.dataStore) {
                            window.appInstance.dataStore.addSalaryEntry(date, company, title, amount);
                            window.appInstance.ui.renderSalaryTable();
                            window.appInstance.chartManager.updateSalaryGrowthChart();
                        } else {
                            // Fallback: Add directly to localStorage with correct format
                            let data = JSON.parse(localStorage.getItem('netWorthData') || '{}');
                            
                            // Initialize data structure if it doesn't exist
                            if (!data.salaryHistory) data.salaryHistory = [];
                            
                            // Create the new entry
                            const newEntry = {
                                id: generateId(),
                                date: date.toISOString(), // Store as ISO string for proper serialization
                                company: company,
                                title: title,
                                amount: amount,
                                increasePercent: 0 // Will be calculated
                            };
                            
                            // Sort entries by date (most recent first)
                            let sortedEntries = [...data.salaryHistory, newEntry]
                                .sort((a, b) => new Date(b.date) - new Date(a.date));
                            
                            // Calculate increase percentage if not the first entry
                            if (sortedEntries.length > 1) {
                                // Current entry is newest, previous is at index 1
                                const previousSalary = sortedEntries[1].amount;
                                const percentIncrease = previousSalary > 0 
                                    ? ((sortedEntries[0].amount - previousSalary) / previousSalary) * 100 
                                    : 0;
                                sortedEntries[0].increasePercent = percentIncrease;
                            }
                            
                            // Update all entries with recalculated percentages
                            data.salaryHistory = sortedEntries;
                            
                            localStorage.setItem('netWorthData', JSON.stringify(data));
                        }
                        
                        // Hide the modal using our reliable method
                        window.hideModal();
                    } catch (error) {
                        alert('Error adding salary entry: ' + error.message);
                        window.hideModal();
                    }
                } else {
                    alert('Please fill all fields with valid values');
                }
            });
        }
    }
    
    // Ensure modal close button works
    const closeButton = modalContainer.querySelector('.close-modal');
    if (closeButton) {
        closeButton.addEventListener('click', () => {
            window.hideModal();
        });
    }
    
    // Add global event listener for closing modal on ESC key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modalContainer.style.display !== 'none') {
            window.hideModal();
        }
    });
    
    // Setup click outside to close
    modalContainer.addEventListener('click', (e) => {
        if (e.target === modalContainer) {
            window.hideModal();
        }
    });
    
    // Override button event listeners for common buttons
    function setupModalTriggers() {
        // List of buttons that should trigger modals
        const modalTriggers = [
            { id: 'add-year', content: createAddYearForm(), type: 'add-year' },
            { id: 'add-asset', content: createAddAssetForm(), type: 'add-asset' },
            { id: 'add-liability', content: createAddLiabilityForm(), type: 'add-liability' },
            { id: 'add-milestone', content: createAddMilestoneForm(), type: 'add-milestone' },
            { id: 'add-salary', content: createAddSalaryForm(), type: 'add-salary' }
        ];
        
        modalTriggers.forEach(trigger => {
            const button = document.getElementById(trigger.id);
            if (button) {
                // Ensure we don't double-attach events
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);
                
                newButton.addEventListener('click', (e) => {
                    e.preventDefault();
                    window.showModal(trigger.content, trigger.type);
                });
            }
        });
    }
    
    // Create forms for common modals
    function createAddYearForm() {
        return `
            <h2>Add New Year</h2>
            <div class="form-group">
                <label for="new-year">Year:</label>
                <input type="number" id="new-year" min="1900" max="2100" value="${new Date().getFullYear()}" />
            </div>
            <div class="form-actions">
                <button id="cancel-year" class="cancel-btn">Cancel</button>
                <button id="save-year" class="save-btn">Add Year</button>
            </div>
        `;
    }
    
    function createAddAssetForm() {
        const currentYear = document.getElementById('year-select')?.value || new Date().getFullYear();
        
        return `
            <h2>Add New Asset</h2>
            <div class="form-group">
                <label for="asset-category">Category:</label>
                <select id="asset-category">
                    <option value="Properties">Properties</option>
                    <option value="Retirement Savings">Retirement Savings</option>
                    <option value="Investments">Investments</option>
                    <option value="Cash and Cash Equivalent">Cash and Cash Equivalent</option>
                    <option value="Other Assets">Other Assets</option>
                </select>
            </div>
            <div class="form-group">
                <label for="asset-name">Item Name:</label>
                <input type="text" id="asset-name" placeholder="e.g. Home, Car, Stocks..." />
            </div>
            <div class="form-group">
                <label for="asset-value">Value (£):</label>
                <input type="number" id="asset-value" min="0" step="0.01" />
            </div>
            <div class="form-actions">
                <button id="cancel-asset" class="cancel-btn">Cancel</button>
                <button id="save-asset" class="save-btn">Add Asset</button>
            </div>
        `;
    }
    
    function createAddLiabilityForm() {
        const currentYear = document.getElementById('year-select')?.value || new Date().getFullYear();
        
        return `
            <h2>Add New Liability</h2>
            <div class="form-group">
                <label for="liability-category">Category:</label>
                <select id="liability-category">
                    <option value="Mortgages">Mortgages</option>
                    <option value="Car loans">Car loans</option>
                    <option value="Student loans">Student loans</option>
                    <option value="Credit Card Debt">Credit Card Debt</option>
                    <option value="Personal Loans">Personal Loans</option>
                    <option value="Other Debts">Other Debts</option>
                </select>
            </div>
            <div class="form-group">
                <label for="liability-value">Value (£):</label>
                <input type="number" id="liability-value" min="0" step="0.01" />
            </div>
            <div class="form-actions">
                <button id="cancel-liability" class="cancel-btn">Cancel</button>
                <button id="save-liability" class="save-btn">Add Liability</button>
            </div>
        `;
    }
    
    function createAddMilestoneForm() {
        return `
            <h2>Add Net Worth Milestone</h2>
            <div class="form-group">
                <label for="milestone-amount">Target Amount (£):</label>
                <input type="number" id="milestone-amount" min="0" step="100" />
            </div>
            <div class="form-group">
                <label for="milestone-name">Description (optional):</label>
                <input type="text" id="milestone-name" placeholder="e.g. Down payment for house" />
            </div>
            <div class="form-actions">
                <button id="cancel-milestone" class="cancel-btn">Cancel</button>
                <button id="save-milestone" class="save-btn">Add Milestone</button>
            </div>
        `;
    }
    
    // Add a function to create the salary form
    function createAddSalaryForm() {
        // Get current date for default
        const now = new Date();
        const currentMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
        
        return `
            <h2>Add Salary Entry</h2>
            <div class="form-group">
                <label for="salary-date">Date (Month/Year):</label>
                <input type="month" id="salary-date" value="${currentMonth}" />
            </div>
            <div class="form-group">
                <label for="salary-company">Company:</label>
                <input type="text" id="salary-company" placeholder="Company name" />
            </div>
            <div class="form-group">
                <label for="salary-title">Title:</label>
                <input type="text" id="salary-title" placeholder="Job title" />
            </div>
            <div class="form-group">
                <label for="salary-amount">Salary (£):</label>
                <input type="number" id="salary-amount" min="0" step="0.01" />
            </div>
            <div class="form-actions">
                <button id="cancel-salary" class="cancel-btn">Cancel</button>
                <button id="save-salary" class="save-btn">Add Salary</button>
            </div>
        `;
    }
    
    // Add a reference to the app's instance to the window 
    // This allows our modal to interact with the application
    try {
        if (window.appInstance === undefined) {
            // Create a listener to capture the app instance when it's initialized
            const originalDataStore = window.DataStore;
            const originalUIController = window.UIController;
            
            // Add a mutation observer to capture when app elements are updated
            const observer = new MutationObserver((mutations) => {
                // Check if we now have valid select options
                const yearSelect = document.getElementById('year-select');
                if (yearSelect && yearSelect.options.length > 0) {
                    // App is now initialized
                    observer.disconnect();
                }
            });
            
            // Start observing document changes
            observer.observe(document.body, { 
                childList: true, 
                subtree: true 
            });
        }
    } catch (e) {
        // Failed to set up app instance capture
    }
    
    // Set up modal triggers
    setupModalTriggers();
    
    // Fix modal styles
    const modalStyle = document.createElement('style');
    modalStyle.textContent = `
        #modal-container {
            position: fixed !important;
            top: 0 !important;
            left: 0 !important;
            width: 100% !important;
            height: 100% !important;
            background-color: rgba(0, 0, 0, 0.5) !important;
            z-index: 10000 !important;
        }
        
        #modal-container.modal-visible {
            display: flex !important;
            visibility: visible !important;
            opacity: 1 !important;
            justify-content: center !important;
            align-items: center !important;
        }
        
        #modal-container.modal-hidden {
            display: none !important;
            visibility: hidden !important;
            opacity: 0 !important;
        }
        
        .modal-content {
            position: relative !important;
            background-color: white !important;
            border-radius: 6px !important;
            padding: 2rem !important;
            width: 90% !important;
            max-width: 500px !important;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;
        }
    `;
    document.head.appendChild(modalStyle);
}); 

----- modalManager.js -----
/**
 * Modal Manager Module
 * Handles all modal interactions
 */
export class ModalManager {
    constructor(dataStore, uiController, chartManager) {
        this.dataStore = dataStore;
        this.uiController = uiController;
        this.chartManager = chartManager;
        this.modalContainer = document.getElementById('modal-container');
        this.modalBody = document.getElementById('modal-body');
        
        // Ensure the modal is hidden initially
        if (this.modalContainer) {
            this.modalContainer.classList.add('modal-hidden');
            this.modalContainer.classList.remove('modal-visible');
        }
        
        // Initialize modal event handlers
        this.initializeModalEvents();
    }
    
    /**
     * Initialize global modal event handlers
     */
    initializeModalEvents() {
        if (!this.modalContainer) return;
        
        // Close modal when clicking the X button
        const closeButton = this.modalContainer.querySelector('.close-modal');
        if (closeButton) {
            // Remove any existing event listeners to prevent duplicates
            closeButton.replaceWith(closeButton.cloneNode(true));
            
            // Add fresh event listener
            this.modalContainer.querySelector('.close-modal').addEventListener('click', () => {
                this.hideModal();
            });
        }
        
        // Close modal when clicking outside the modal content
        // Use a named function to be able to remove and re-add the event listener
        this.outsideClickHandler = (e) => {
            if (e.target === this.modalContainer) {
                this.hideModal();
            }
        };
        
        // Remove existing listener if any and add a new one
        this.modalContainer.removeEventListener('click', this.outsideClickHandler);
        this.modalContainer.addEventListener('click', this.outsideClickHandler);
        
        // Close modal on Escape key
        this.escKeyHandler = (e) => {
            if (e.key === 'Escape' && !this.modalContainer.classList.contains('modal-hidden')) {
                this.hideModal();
            }
        };
        
        // Remove existing listener if any and add a new one
        document.removeEventListener('keydown', this.escKeyHandler);
        document.addEventListener('keydown', this.escKeyHandler);
    }
    
    /**
     * Show the modal with custom content
     */
    showModal(content) {
        if (!this.modalContainer || !this.modalBody) return;
        
        this.modalBody.innerHTML = content;
        this.modalContainer.classList.remove('modal-hidden');
        this.modalContainer.classList.add('modal-visible');
        
        // Reinitialize event handlers to ensure they work with new content
        this.initializeModalEvents();
    }
    
    /**
     * Hide the modal
     */
    hideModal() {
        if (!this.modalContainer) return;
        this.modalContainer.classList.add('modal-hidden');
        this.modalContainer.classList.remove('modal-visible');
    }
    
    /**
     * Show Export/Import Data modal
     */
    showDataManagementModal() {
        const currentData = JSON.stringify(this.dataStore.data, null, 2);
        
        const content = `
            <h2>Data Management</h2>
            <p>Export your data as JSON to back it up, or import previously exported data.</p>
            
            <div class="tabs">
                <button class="tab-button active" data-tab="export">Export Data</button>
                <button class="tab-button" data-tab="import">Import Data</button>
            </div>
            
            <div class="tab-content active" id="export-tab">
                <p>Copy the JSON data below to save it:</p>
                <textarea id="export-data" rows="10" readonly>${currentData}</textarea>
                <div class="form-actions">
                    <button id="copy-data" class="save-btn">Copy to Clipboard</button>
                </div>
            </div>
            
            <div class="tab-content" id="import-tab">
                <p>Paste your previously exported JSON data below:</p>
                <textarea id="import-data" rows="10" placeholder="Paste your backup data here..."></textarea>
                <div class="form-actions">
                    <button id="cancel-import" class="cancel-btn">Cancel</button>
                    <button id="import-data-btn" class="save-btn">Import Data</button>
                </div>
                <p class="warning">Warning: This will overwrite your current data!</p>
            </div>
        `;
        
        this.showModal(content);
        
        // Set up tab switching
        const tabButtons = document.querySelectorAll('.tab-button');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetTab = button.getAttribute('data-tab');
                
                // Update active tab button
                tabButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                // Show target tab content, hide others
                tabContents.forEach(content => {
                    if (content.id === `${targetTab}-tab`) {
                        content.classList.add('active');
                    } else {
                        content.classList.remove('active');
                    }
                });
            });
        });
        
        // Set up copy to clipboard
        const copyButton = document.getElementById('copy-data');
        if (copyButton) {
            copyButton.addEventListener('click', () => {
                const exportData = document.getElementById('export-data');
                exportData.select();
                document.execCommand('copy');
                copyButton.textContent = 'Copied!';
                setTimeout(() => {
                    copyButton.textContent = 'Copy to Clipboard';
                }, 2000);
            });
        }
        
        // Set up import data
        const importButton = document.getElementById('import-data-btn');
        if (importButton) {
            importButton.addEventListener('click', () => {
                const importData = document.getElementById('import-data').value;
                
                try {
                    const parsedData = JSON.parse(importData);
                    
                    // Basic validation
                    if (!parsedData.years || !parsedData.milestones) {
                        throw new Error('Invalid data format');
                    }
                    
                    this.dataStore.data = parsedData;
                    this.dataStore.saveData();
                    
                    // Update UI
                    this.uiController.renderYearSelector();
                    this.uiController.renderFinancialTables();
                    this.uiController.renderDashboardSummary();
                    this.uiController.renderMilestones();
                    
                    // Update charts
                    this.chartManager.updateAllCharts();
                    
                    this.hideModal();
                    alert('Data imported successfully!');
                } catch (error) {
                    alert(`Error importing data: ${error.message}`);
                }
            });
        }
        
        // Set up cancel button
        const cancelButton = document.getElementById('cancel-import');
        if (cancelButton) {
            cancelButton.addEventListener('click', () => {
                this.hideModal();
            });
        }
    }
    
    /**
     * Show data reset confirmation modal
     */
    showResetDataModal() {
        const content = `
            <h2>Reset All Data</h2>
            <p class="warning">Warning: This will permanently delete all your financial data!</p>
            <p>This action cannot be undone. Consider exporting your data first.</p>
            <div class="form-actions">
                <button id="cancel-reset" class="save-btn">Cancel</button>
                <button id="confirm-reset" class="danger-btn">Yes, Reset All Data</button>
            </div>
        `;
        
        this.showModal(content);
        
        // Set up cancel button
        const cancelButton = document.getElementById('cancel-reset');
        if (cancelButton) {
            cancelButton.addEventListener('click', () => {
                this.hideModal();
            });
        }
        
        // Set up confirm button
        const confirmButton = document.getElementById('confirm-reset');
        if (confirmButton) {
            confirmButton.addEventListener('click', () => {
                // Clear localStorage
                localStorage.removeItem('netWorthData');
                
                // Reinitialize data
                this.dataStore.initializeDefaultData();
                
                // Update UI
                this.uiController.renderYearSelector();
                this.uiController.renderFinancialTables();
                this.uiController.renderDashboardSummary();
                this.uiController.renderMilestones();
                
                // Update charts
                this.chartManager.updateAllCharts();
                
                this.hideModal();
                alert('All data has been reset.');
            });
        }
    }
} 

----- module-test.js -----
/**
 * Module Test
 * Tests if ES6 modules are loading correctly
 */

console.log('MODULE-TEST.JS STARTING');

// Import the minimal test module
import { sayHello } from './modules/minimal-test.js';

// Try to use the imported function
console.log('About to call sayHello()');
const result = sayHello();
console.log('Result from sayHello():', result);

console.log('MODULE-TEST.JS COMPLETED'); 

----- dashboardUI.js -----
/**
 * Dashboard UI Module
 * Handles the dashboard UI and summary display
 */
import { getCurrentData } from './dataService.js';
import { formatCurrency, calculatePercentChange } from './utils.js';

/**
 * Update the dashboard summary with the latest data
 */
export function updateDashboardSummary() {
    const data = getCurrentData();
    if (!data.years) return;
    
    // Get the current selected year
    const yearSelect = document.getElementById('year-select');
    const currentYear = yearSelect ? yearSelect.value : null;
    
    if (!currentYear || !data.years[currentYear]) return;
    
    // Get all years sorted chronologically
    const years = Object.keys(data.years).sort();
    
    // Find the index of the current year and previous year (if any)
    const currentYearIndex = years.indexOf(currentYear);
    const hasPreviousYear = currentYearIndex > 0;
    const previousYear = hasPreviousYear ? years[currentYearIndex - 1] : null;
    
    // Calculate current net worth, assets, and liabilities
    const netWorth = calculateNetWorth(data.years[currentYear]);
    const totalAssets = calculateTotalAssets(data.years[currentYear]);
    const totalLiabilities = calculateTotalLiabilities(data.years[currentYear]);
    
    // Calculate previous net worth for comparison
    let previousNetWorth = 0;
    if (previousYear && data.years[previousYear]) {
        previousNetWorth = calculateNetWorth(data.years[previousYear]);
    }
    
    // Calculate debt-to-asset ratio
    const debtAssetRatio = totalAssets > 0 ? (totalLiabilities / totalAssets) * 100 : 0;
    
    // Update UI
    updateNetWorthDisplay(netWorth, previousNetWorth);
    updateAssetsDisplay(totalAssets);
    updateLiabilitiesDisplay(totalLiabilities);
    updateDebtRatioDisplay(debtAssetRatio);
}

/**
 * Calculate net worth based on year data
 * @param {Object} yearData - Data for a specific year
 * @returns {number} - The calculated net worth
 */
function calculateNetWorth(yearData) {
    if (!yearData) return 0;
    
    const totalAssets = calculateTotalAssets(yearData);
    const totalLiabilities = calculateTotalLiabilities(yearData);
    
    return totalAssets - totalLiabilities;
}

/**
 * Calculate total assets based on year data
 * @param {Object} yearData - Data for a specific year
 * @returns {number} - The total assets value
 */
function calculateTotalAssets(yearData) {
    if (!yearData || !yearData.assets) return 0;
    
    return yearData.assets.reduce((total, asset) => total + parseFloat(asset.value || 0), 0);
}

/**
 * Calculate total liabilities based on year data
 * @param {Object} yearData - Data for a specific year
 * @returns {number} - The total liabilities value
 */
function calculateTotalLiabilities(yearData) {
    if (!yearData || !yearData.liabilities) return 0;
    
    return yearData.liabilities.reduce((total, liability) => total + parseFloat(liability.value || 0), 0);
}

/**
 * Update the net worth display
 * @param {number} netWorth - Current net worth
 * @param {number} previousNetWorth - Previous net worth for comparison
 */
function updateNetWorthDisplay(netWorth, previousNetWorth) {
    const netWorthElement = document.getElementById('current-net-worth');
    const netWorthChangeElement = document.getElementById('net-worth-change');
    
    if (netWorthElement) {
        netWorthElement.textContent = formatCurrency(netWorth);
    }
    
    if (netWorthChangeElement && previousNetWorth !== 0) {
        const percentChange = calculatePercentChange(previousNetWorth, netWorth);
        
        netWorthChangeElement.textContent = `${percentChange >= 0 ? '+' : ''}${percentChange.toFixed(1)}% from last year`;
        netWorthChangeElement.className = 'change ' + (percentChange >= 0 ? 'positive' : 'negative');
    } else if (netWorthChangeElement) {
        netWorthChangeElement.textContent = 'No previous year data';
        netWorthChangeElement.className = 'change';
    }
}

/**
 * Update the assets display
 * @param {number} totalAssets - Total assets value
 */
function updateAssetsDisplay(totalAssets) {
    const assetsElement = document.getElementById('total-assets');
    
    if (assetsElement) {
        assetsElement.textContent = formatCurrency(totalAssets);
    }
}

/**
 * Update the liabilities display
 * @param {number} totalLiabilities - Total liabilities value
 */
function updateLiabilitiesDisplay(totalLiabilities) {
    const liabilitiesElement = document.getElementById('total-liabilities');
    
    if (liabilitiesElement) {
        liabilitiesElement.textContent = formatCurrency(totalLiabilities);
    }
}

/**
 * Update the debt-to-asset ratio display
 * @param {number} ratio - Debt-to-asset ratio percentage
 */
function updateDebtRatioDisplay(ratio) {
    const ratioElement = document.getElementById('debt-asset-ratio');
    const ratioBarElement = document.getElementById('debt-ratio-bar');
    
    if (ratioElement) {
        ratioElement.textContent = `${ratio.toFixed(1)}%`;
    }
    
    if (ratioBarElement) {
        // Limit width to 100%
        const barWidth = Math.min(ratio, 100);
        ratioBarElement.style.width = `${barWidth}%`;
        
        // Set color based on ratio
        if (ratio < 30) {
            ratioBarElement.style.backgroundColor = '#4caf50'; // Green - healthy
        } else if (ratio < 60) {
            ratioBarElement.style.backgroundColor = '#ff9800'; // Orange - warning
        } else {
            ratioBarElement.style.backgroundColor = '#f44336'; // Red - danger
        }
    }
} 

----- dataService.js -----
/**
 * Data Service Module
 * Handles data operations with localStorage
 */

/**
 * Get current data from localStorage
 * @returns {Object} The parsed data or empty object if not found
 */
export function getCurrentData() {
    try {
        return JSON.parse(localStorage.getItem('netWorthData') || '{}');
    } catch (e) {
        return {};
    }
}

/**
 * Save data to localStorage
 * @param {Object} data - The data to save
 */
export function saveData(data) {
    localStorage.setItem('netWorthData', JSON.stringify(data));
}

/**
 * Import data from JSON string
 * @param {string} jsonData - The JSON data to import
 * @returns {boolean} Success status
 */
export function importData(jsonData) {
    try {
        const parsedData = JSON.parse(jsonData);
        
        // Basic validation
        if (!parsedData.years) {
            throw new Error('Invalid data format: missing years property');
        }
        
        // Save the imported data
        localStorage.setItem('netWorthData', jsonData);
        return true;
    } catch (error) {
        throw error;
    }
}

/**
 * Export data as JSON string
 * @returns {string} Formatted JSON data
 */
export function exportData() {
    try {
        const data = localStorage.getItem('netWorthData') || '{}';
        const parsedData = JSON.parse(data);
        return JSON.stringify(parsedData, null, 2);
    } catch (e) {
        return '{}';
    }
}

/**
 * Generate a unique ID
 * @returns {string} A unique ID
 */
export function generateId() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
} 

----- financialTablesUI.js -----
/**
 * Financial Tables UI Module
 * Handles the assets and liabilities tables UI
 */
import { getCurrentData, saveData } from './dataService.js';
import { formatCurrency } from './utils.js';
import { showAssetForm, showLiabilityForm } from './formHandlerUI.js';
import { updateDashboardSummary } from './dashboardUI.js';
import { renderDashboardCharts } from './chartsUI.js';

/**
 * Render the financial tables (assets & liabilities) for the specified year
 * @param {string} yearId - The year ID to render tables for
 */
export function renderFinancialTables(yearId) {
    if (!yearId) {
        const yearSelect = document.getElementById('year-select');
        if (yearSelect) {
            yearId = yearSelect.value;
        }
    }
    
    if (!yearId) return;
    
    // Render both tables
    renderAssetsTable(yearId);
    renderLiabilitiesTable(yearId);
    
    // Update totals
    updateTotals(yearId);
    
    // Set up action buttons for both tables
    setupActionButtons('asset');
    setupActionButtons('liability');
}

/**
 * Render the assets table for the specified year
 * @param {string} yearId - The year ID to render the assets table for
 */
function renderAssetsTable(yearId) {
    if (!yearId) return;
    
    const data = getCurrentData();
    const assetsTableBody = document.querySelector('#assets-table tbody');
    
    if (!assetsTableBody) return;
    
    // Clear existing rows
    assetsTableBody.innerHTML = '';
    
    // Check if year data exists
    if (!data.years || !data.years[yearId] || !data.years[yearId].assets) {
        // No assets to display
        return;
    }
    
    // Sort assets by value (highest first)
    const assets = [...data.years[yearId].assets].sort((a, b) => parseFloat(b.value) - parseFloat(a.value));
    
    // Add assets to table
    assets.forEach(asset => {
        const row = document.createElement('tr');
        
        row.innerHTML = `
            <td>${asset.category || 'Uncategorized'}</td>
            <td>${asset.name}</td>
            <td>${formatCurrency(asset.value)}</td>
            <td>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-primary edit-asset" data-id="${asset.id}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger delete-asset" data-id="${asset.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </td>
        `;
        
        assetsTableBody.appendChild(row);
    });
}

/**
 * Render the liabilities table for the specified year
 * @param {string} yearId - The year ID to render the liabilities table for
 */
function renderLiabilitiesTable(yearId) {
    if (!yearId) return;
    
    const data = getCurrentData();
    const liabilitiesTableBody = document.querySelector('#liabilities-table tbody');
    
    if (!liabilitiesTableBody) return;
    
    // Clear existing rows
    liabilitiesTableBody.innerHTML = '';
    
    // Check if year data exists
    if (!data.years || !data.years[yearId] || !data.years[yearId].liabilities) {
        // No liabilities to display
        return;
    }
    
    // Sort liabilities by value (highest first)
    const liabilities = [...data.years[yearId].liabilities].sort((a, b) => parseFloat(b.value) - parseFloat(a.value));
    
    // Add liabilities to table
    liabilities.forEach(liability => {
        const row = document.createElement('tr');
        
        row.innerHTML = `
            <td>${liability.category || 'Uncategorized'}</td>
            <td>${liability.name}</td>
            <td>${formatCurrency(liability.value)}</td>
            <td>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-primary edit-liability" data-id="${liability.id}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger delete-liability" data-id="${liability.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </td>
        `;
        
        liabilitiesTableBody.appendChild(row);
    });
}

/**
 * Set up action buttons for the specified item type
 * @param {string} itemType - The type of item ('asset' or 'liability')
 */
function setupActionButtons(itemType) {
    // Edit buttons
    document.querySelectorAll(`.edit-${itemType}`).forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            editItem(id, itemType);
        });
    });
    
    // Delete buttons
    document.querySelectorAll(`.delete-${itemType}`).forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            deleteItem(id, itemType);
        });
    });
}

/**
 * Edit an item
 * @param {string} id - The ID of the item to edit
 * @param {string} type - The type of item ('asset' or 'liability')
 */
function editItem(id, type) {
    if (!id || !type) return;
    
    const data = getCurrentData();
    const yearSelect = document.getElementById('year-select');
    if (!yearSelect) return;
    
    const yearId = yearSelect.value;
    if (!yearId || !data.years || !data.years[yearId]) return;
    
    if (type === 'asset') {
        if (!data.years[yearId].assets) return;
        
        const asset = data.years[yearId].assets.find(a => a.id === id);
        if (asset) {
            showAssetForm(asset);
        }
    } else if (type === 'liability') {
        if (!data.years[yearId].liabilities) return;
        
        const liability = data.years[yearId].liabilities.find(l => l.id === id);
        if (liability) {
            showLiabilityForm(liability);
        }
    }
}

/**
 * Delete an item
 * @param {string} id - The ID of the item to delete
 * @param {string} type - The type of item ('asset' or 'liability')
 */
function deleteItem(id, type) {
    if (!id || !type) return;
    
    // Confirm deletion
    if (!confirm(`Are you sure you want to delete this ${type}?`)) {
        return;
    }
    
    const data = getCurrentData();
    const yearSelect = document.getElementById('year-select');
    if (!yearSelect) return;
    
    const yearId = yearSelect.value;
    if (!yearId || !data.years || !data.years[yearId]) return;
    
    let updated = false;
    
    if (type === 'asset') {
        if (!data.years[yearId].assets) return;
        
        const index = data.years[yearId].assets.findIndex(a => a.id === id);
        if (index !== -1) {
            data.years[yearId].assets.splice(index, 1);
            updated = true;
        }
    } else if (type === 'liability') {
        if (!data.years[yearId].liabilities) return;
        
        const index = data.years[yearId].liabilities.findIndex(l => l.id === id);
        if (index !== -1) {
            data.years[yearId].liabilities.splice(index, 1);
            updated = true;
        }
    }
    
    if (updated) {
        saveData(data);
        renderFinancialTables(yearId);
        updateDashboardSummary();
        renderDashboardCharts();
    }
}

/**
 * Update the totals displayed in the tables
 * @param {string} yearId - The year ID to update totals for
 */
export function updateTotals(yearId) {
    if (!yearId) {
        const yearSelect = document.getElementById('year-select');
        if (yearSelect) {
            yearId = yearSelect.value;
        }
    }
    
    if (!yearId) return;
    
    const data = getCurrentData();
    if (!data.years || !data.years[yearId]) return;
    
    // Calculate totals
    let assetsTotal = 0;
    let liabilitiesTotal = 0;
    
    if (data.years[yearId].assets) {
        assetsTotal = data.years[yearId].assets.reduce((total, asset) => total + parseFloat(asset.value), 0);
    }
    
    if (data.years[yearId].liabilities) {
        liabilitiesTotal = data.years[yearId].liabilities.reduce((total, liability) => total + parseFloat(liability.value), 0);
    }
    
    // Update UI
    const assetsTotalElement = document.getElementById('assets-total');
    const liabilitiesTotalElement = document.getElementById('liabilities-total');
    
    if (assetsTotalElement) {
        assetsTotalElement.textContent = formatCurrency(assetsTotal);
    }
    
    if (liabilitiesTotalElement) {
        liabilitiesTotalElement.textContent = formatCurrency(liabilitiesTotal);
    }
} 

----- formHandlerUI.js -----
/**
 * Form Handler UI Module
 * Handles forms for adding/editing assets and liabilities
 */
import { getCurrentData, saveData, generateId } from './dataService.js';
import { renderFinancialTables } from './financialTablesUI.js';
import { updateDashboardSummary } from './dashboardUI.js';
import { renderDashboardCharts } from './chartsUI.js';

/**
 * Initialize form handlers
 */
export function initFormHandlers() {
    setupAssetForm();
    setupLiabilityForm();
}

/**
 * Set up asset form
 */
function setupAssetForm() {
    const addAssetBtn = document.getElementById('add-asset');
    if (addAssetBtn) {
        addAssetBtn.addEventListener('click', function() {
            showAssetForm();
        });
    }
}

/**
 * Set up liability form
 */
function setupLiabilityForm() {
    const addLiabilityBtn = document.getElementById('add-liability');
    if (addLiabilityBtn) {
        addLiabilityBtn.addEventListener('click', function() {
            showLiabilityForm();
        });
    }
}

/**
 * Show the asset form
 * @param {Object} [asset] - Asset to edit (optional)
 */
export function showAssetForm(asset) {
    const modalBody = document.getElementById('modal-body');
    if (!modalBody) return;
    
    const yearSelect = document.getElementById('year-select');
    const selectedYear = yearSelect ? yearSelect.value : null;
    
    if (!selectedYear) {
        alert('Please select a year first.');
        return;
    }
    
    const isEditing = !!asset;
    
    // Create form HTML
    modalBody.innerHTML = `
        <h2>${isEditing ? 'Edit' : 'Add'} Asset</h2>
        <form id="asset-form">
            <div class="form-group">
                <label for="asset-name">Name:</label>
                <input type="text" id="asset-name" class="form-control" value="${isEditing ? asset.name : ''}" required>
            </div>
            <div class="form-group">
                <label for="asset-category">Category:</label>
                <select id="asset-category" class="form-control">
                    <option value="Cash" ${isEditing && asset.category === 'Cash' ? 'selected' : ''}>Cash</option>
                    <option value="Property" ${isEditing && asset.category === 'Property' ? 'selected' : ''}>Property</option>
                    <option value="Investments" ${isEditing && asset.category === 'Investments' ? 'selected' : ''}>Investments</option>
                    <option value="Retirement" ${isEditing && asset.category === 'Retirement' ? 'selected' : ''}>Retirement</option>
                    <option value="Vehicle" ${isEditing && asset.category === 'Vehicle' ? 'selected' : ''}>Vehicle</option>
                    <option value="Other" ${isEditing && asset.category === 'Other' ? 'selected' : ''}>Other</option>
                </select>
            </div>
            <div class="form-group">
                <label for="asset-value">Value (£):</label>
                <input type="number" id="asset-value" class="form-control" min="0" step="0.01" value="${isEditing ? asset.value : ''}" required>
            </div>
            <div class="form-group">
                <label for="asset-notes">Notes:</label>
                <textarea id="asset-notes" class="form-control">${isEditing && asset.notes ? asset.notes : ''}</textarea>
            </div>
            ${isEditing ? `<input type="hidden" id="asset-id" value="${asset.id}">` : ''}
            <div class="form-actions">
                <button type="button" class="cancel-btn" onclick="document.getElementById('modal-container').classList.add('modal-hidden')">Cancel</button>
                <button type="submit" class="save-btn">Save</button>
            </div>
        </form>
    `;
    
    // Show modal
    const modalContainer = document.getElementById('modal-container');
    if (modalContainer) {
        modalContainer.classList.remove('modal-hidden');
        modalContainer.classList.add('modal-visible');
    }
    
    // Set up form submission
    const form = document.getElementById('asset-form');
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            saveAssetForm(selectedYear);
        });
    }
}

/**
 * Save the asset form
 * @param {string} yearId - The year to save the asset to
 */
function saveAssetForm(yearId) {
    const nameInput = document.getElementById('asset-name');
    const categoryInput = document.getElementById('asset-category');
    const valueInput = document.getElementById('asset-value');
    const notesInput = document.getElementById('asset-notes');
    const idInput = document.getElementById('asset-id');
    
    if (!nameInput || !categoryInput || !valueInput) return;
    
    const name = nameInput.value.trim();
    const category = categoryInput.value;
    const value = parseFloat(valueInput.value);
    const notes = notesInput ? notesInput.value.trim() : '';
    const id = idInput ? idInput.value : '';
    
    if (!name || isNaN(value) || value < 0) {
        alert('Please fill in all required fields with valid values.');
        return;
    }
    
    const data = getCurrentData();
    
    if (!data.years[yearId]) {
        data.years[yearId] = {
            assets: [],
            liabilities: []
        };
    }
    
    if (!data.years[yearId].assets) {
        data.years[yearId].assets = [];
    }
    
    if (id) {
        // Edit existing asset
        const index = data.years[yearId].assets.findIndex(asset => asset.id === id);
        if (index !== -1) {
            data.years[yearId].assets[index] = {
                ...data.years[yearId].assets[index],
                name,
                category,
                value,
                notes,
                lastModified: new Date().toISOString()
            };
        }
    } else {
        // Add new asset
        data.years[yearId].assets.push({
            id: generateId(),
            name,
            category,
            value,
            notes,
            dateAdded: new Date().toISOString()
        });
    }
    
    saveData(data);
    
    // Close modal
    const modalContainer = document.getElementById('modal-container');
    if (modalContainer) {
        modalContainer.classList.add('modal-hidden');
        modalContainer.classList.remove('modal-visible');
    }
    
    // Update UI
    renderFinancialTables(yearId);
    updateDashboardSummary();
    renderDashboardCharts();
}

/**
 * Show the liability form
 * @param {Object} [liability] - Liability to edit (optional)
 */
export function showLiabilityForm(liability) {
    const modalBody = document.getElementById('modal-body');
    if (!modalBody) return;
    
    const yearSelect = document.getElementById('year-select');
    const selectedYear = yearSelect ? yearSelect.value : null;
    
    if (!selectedYear) {
        alert('Please select a year first.');
        return;
    }
    
    const isEditing = !!liability;
    
    // Create form HTML
    modalBody.innerHTML = `
        <h2>${isEditing ? 'Edit' : 'Add'} Liability</h2>
        <form id="liability-form">
            <div class="form-group">
                <label for="liability-name">Name:</label>
                <input type="text" id="liability-name" class="form-control" value="${isEditing ? liability.name : ''}" required>
            </div>
            <div class="form-group">
                <label for="liability-category">Category:</label>
                <select id="liability-category" class="form-control">
                    <option value="Mortgage" ${isEditing && liability.category === 'Mortgage' ? 'selected' : ''}>Mortgage</option>
                    <option value="Loan" ${isEditing && liability.category === 'Loan' ? 'selected' : ''}>Loan</option>
                    <option value="Credit Card" ${isEditing && liability.category === 'Credit Card' ? 'selected' : ''}>Credit Card</option>
                    <option value="Student Loan" ${isEditing && liability.category === 'Student Loan' ? 'selected' : ''}>Student Loan</option>
                    <option value="Other" ${isEditing && liability.category === 'Other' ? 'selected' : ''}>Other</option>
                </select>
            </div>
            <div class="form-group">
                <label for="liability-value">Value (£):</label>
                <input type="number" id="liability-value" class="form-control" min="0" step="0.01" value="${isEditing ? liability.value : ''}" required>
            </div>
            <div class="form-group">
                <label for="liability-interest">Interest Rate (%):</label>
                <input type="number" id="liability-interest" class="form-control" min="0" step="0.1" value="${isEditing && liability.interestRate ? liability.interestRate : ''}">
            </div>
            <div class="form-group">
                <label for="liability-notes">Notes:</label>
                <textarea id="liability-notes" class="form-control">${isEditing && liability.notes ? liability.notes : ''}</textarea>
            </div>
            ${isEditing ? `<input type="hidden" id="liability-id" value="${liability.id}">` : ''}
            <div class="form-actions">
                <button type="button" class="cancel-btn" onclick="document.getElementById('modal-container').classList.add('modal-hidden')">Cancel</button>
                <button type="submit" class="save-btn">Save</button>
            </div>
        </form>
    `;
    
    // Show modal
    const modalContainer = document.getElementById('modal-container');
    if (modalContainer) {
        modalContainer.classList.remove('modal-hidden');
        modalContainer.classList.add('modal-visible');
    }
    
    // Set up form submission
    const form = document.getElementById('liability-form');
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            saveLiabilityForm(selectedYear);
        });
    }
}

/**
 * Save the liability form
 * @param {string} yearId - The year to save the liability to
 */
function saveLiabilityForm(yearId) {
    const nameInput = document.getElementById('liability-name');
    const categoryInput = document.getElementById('liability-category');
    const valueInput = document.getElementById('liability-value');
    const interestInput = document.getElementById('liability-interest');
    const notesInput = document.getElementById('liability-notes');
    const idInput = document.getElementById('liability-id');
    
    if (!nameInput || !categoryInput || !valueInput) return;
    
    const name = nameInput.value.trim();
    const category = categoryInput.value;
    const value = parseFloat(valueInput.value);
    const interestRate = interestInput && interestInput.value ? parseFloat(interestInput.value) : null;
    const notes = notesInput ? notesInput.value.trim() : '';
    const id = idInput ? idInput.value : '';
    
    if (!name || isNaN(value) || value < 0) {
        alert('Please fill in all required fields with valid values.');
        return;
    }
    
    const data = getCurrentData();
    
    if (!data.years[yearId]) {
        data.years[yearId] = {
            assets: [],
            liabilities: []
        };
    }
    
    if (!data.years[yearId].liabilities) {
        data.years[yearId].liabilities = [];
    }
    
    if (id) {
        // Edit existing liability
        const index = data.years[yearId].liabilities.findIndex(liability => liability.id === id);
        if (index !== -1) {
            data.years[yearId].liabilities[index] = {
                ...data.years[yearId].liabilities[index],
                name,
                category,
                value,
                interestRate,
                notes,
                lastModified: new Date().toISOString()
            };
        }
    } else {
        // Add new liability
        data.years[yearId].liabilities.push({
            id: generateId(),
            name,
            category,
            value,
            interestRate,
            notes,
            dateAdded: new Date().toISOString()
        });
    }
    
    saveData(data);
    
    // Close modal
    const modalContainer = document.getElementById('modal-container');
    if (modalContainer) {
        modalContainer.classList.add('modal-hidden');
        modalContainer.classList.remove('modal-visible');
    }
    
    // Update UI
    renderFinancialTables(yearId);
    updateDashboardSummary();
    renderDashboardCharts();
} 

----- milestonesUI.js -----
/**
 * Milestones UI Module
 * Handles milestone tracking and visualization
 */
import { getCurrentData, saveData, generateId } from './dataService.js';
import { formatCurrency } from './utils.js';

/**
 * Initialize milestones UI
 */
export function initMilestonesUI() {
    renderMilestones();
    setupMilestoneForm();
}

/**
 * Render milestones list
 */
function renderMilestones() {
    const data = getCurrentData();
    if (!data.milestones) {
        data.milestones = [];
        saveData(data);
    }
    
    // Sort milestones by target amount
    const sortedMilestones = [...data.milestones].sort((a, b) => parseFloat(a.target) - parseFloat(b.target));
    
    const milestonesContainer = document.getElementById('milestones-container');
    if (!milestonesContainer) return;
    
    milestonesContainer.innerHTML = '';
    
    if (sortedMilestones.length === 0) {
        milestonesContainer.innerHTML = '<div class="alert alert-info">No milestones set. Add your first milestone!</div>';
        return;
    }
    
    // Calculate current net worth for progress
    let currentNetWorth = 0;
    const yearSelect = document.getElementById('year-select');
    const currentYear = yearSelect ? yearSelect.value : null;
    
    if (currentYear && data.years && data.years[currentYear]) {
        const yearData = data.years[currentYear];
        
        let assetsTotal = 0;
        if (yearData.assets) {
            assetsTotal = yearData.assets.reduce((total, asset) => total + parseFloat(asset.value), 0);
        }
        
        let liabilitiesTotal = 0;
        if (yearData.liabilities) {
            liabilitiesTotal = yearData.liabilities.reduce((total, liability) => total + parseFloat(liability.value), 0);
        }
        
        currentNetWorth = assetsTotal - liabilitiesTotal;
    }
    
    // Create milestone cards
    sortedMilestones.forEach(milestone => {
        const card = document.createElement('div');
        card.className = 'card mb-3';
        
        // Calculate progress percentage
        let progressPercentage = 0;
        if (milestone.target > 0) {
            progressPercentage = Math.min(100, Math.max(0, (currentNetWorth / parseFloat(milestone.target)) * 100));
        }
        
        // Determine progress class
        let progressClass = 'bg-info';
        if (progressPercentage >= 100) {
            progressClass = 'bg-success';
        } else if (progressPercentage >= 75) {
            progressClass = 'bg-info';
        } else if (progressPercentage >= 50) {
            progressClass = 'bg-primary';
        } else if (progressPercentage >= 25) {
            progressClass = 'bg-warning';
        } else {
            progressClass = 'bg-danger';
        }
        
        // Create card content
        card.innerHTML = `
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h5 class="card-title mb-0">${milestone.name}</h5>
                    <div>
                        <button class="btn btn-sm btn-outline-danger delete-milestone" data-id="${milestone.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <h6 class="card-subtitle mb-2 text-muted">Target: ${formatCurrency(milestone.target)}</h6>
                <div class="progress" style="height: 25px;">
                    <div class="progress-bar ${progressClass}" role="progressbar" 
                         style="width: ${progressPercentage}%;" 
                         aria-valuenow="${progressPercentage}" aria-valuemin="0" aria-valuemax="100">
                        ${Math.round(progressPercentage)}%
                    </div>
                </div>
                <div class="mt-2 text-muted">
                    Current: ${formatCurrency(currentNetWorth)} 
                    (${currentNetWorth >= parseFloat(milestone.target) ? 'Achieved!' : 
                       formatCurrency(parseFloat(milestone.target) - currentNetWorth) + ' to go'})
                </div>
                ${milestone.notes ? `<p class="card-text mt-2"><small>${milestone.notes}</small></p>` : ''}
            </div>
        `;
        
        milestonesContainer.appendChild(card);
    });
    
    // Set up delete buttons
    document.querySelectorAll('.delete-milestone').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            deleteMilestone(id);
        });
    });
}

/**
 * Set up milestone form
 */
function setupMilestoneForm() {
    const form = document.getElementById('add-milestone-form');
    if (!form) return;
    
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const nameInput = document.getElementById('milestone-name');
        const targetInput = document.getElementById('milestone-target');
        const notesInput = document.getElementById('milestone-notes');
        
        if (!nameInput || !targetInput) return;
        
        const name = nameInput.value.trim();
        const target = parseFloat(targetInput.value);
        const notes = notesInput ? notesInput.value.trim() : '';
        
        if (!name || isNaN(target) || target <= 0) {
            alert('Please enter a valid name and target amount.');
            return;
        }
        
        // Add new milestone
        const data = getCurrentData();
        if (!data.milestones) {
            data.milestones = [];
        }
        
        data.milestones.push({
            id: generateId(),
            name,
            target,
            notes,
            dateAdded: new Date().toISOString()
        });
        
        saveData(data);
        
        // Reset form
        form.reset();
        
        // Update UI
        renderMilestones();
        
        // Close modal if open
        const modal = bootstrap.Modal.getInstance(document.getElementById('add-milestone-modal'));
        if (modal) {
            modal.hide();
        }
    });
}

/**
 * Delete a milestone
 * @param {string} id - The ID of the milestone to delete
 */
function deleteMilestone(id) {
    if (!confirm('Are you sure you want to delete this milestone?')) {
        return;
    }
    
    const data = getCurrentData();
    if (!data.milestones) return;
    
    // Find and remove the milestone
    const index = data.milestones.findIndex(m => m.id === id);
    if (index !== -1) {
        data.milestones.splice(index, 1);
        saveData(data);
        renderMilestones();
    }
} 

----- salaryTrackerUI.js -----
/**
 * Salary Tracker UI Module
 * Handles salary history tracking and visualization
 */
import { getCurrentData, saveData, generateId } from './dataService.js';
import { formatCurrency, calculatePercentChange } from './utils.js';
import { renderSalaryChart } from './chartsUI.js';

/**
 * Initialize salary tracker UI
 */
export function initSalaryTrackerUI() {
    renderSalaryTable();
    setupSalaryForm();
}

/**
 * Render the salary history table
 */
function renderSalaryTable() {
    const data = getCurrentData();
    if (!data.salaryHistory) {
        data.salaryHistory = [];
        saveData(data);
    }
    
    // Sort by date (newest first)
    const sortedEntries = [...data.salaryHistory].sort((a, b) => new Date(b.date) - new Date(a.date));
    
    const tableBody = document.getElementById('salary-table-body');
    if (!tableBody) return;
    
    tableBody.innerHTML = '';
    
    if (sortedEntries.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = '<td colspan="5" class="text-center">No salary entries yet. Add your first entry!</td>';
        tableBody.appendChild(emptyRow);
        return;
    }
    
    // Add percent change from previous entry
    let previousAmount = null;
    sortedEntries.forEach((entry, index) => {
        entry.increasePercent = 0;
        if (index < sortedEntries.length - 1) {
            const prevEntry = sortedEntries[index + 1];
            entry.increasePercent = calculatePercentChange(prevEntry.amount, entry.amount);
        }
    });
    
    // Create table rows
    sortedEntries.forEach(entry => {
        const row = document.createElement('tr');
        
        const formattedDate = new Date(entry.date).toLocaleDateString('en-GB', {
            year: 'numeric',
            month: 'short'
        });
        
        const increaseText = entry.increasePercent === 0 ? '' : 
            `<span class="${entry.increasePercent > 0 ? 'text-success' : 'text-danger'}">
                ${entry.increasePercent > 0 ? '+' : ''}${entry.increasePercent.toFixed(1)}%
            </span>`;
        
        row.innerHTML = `
            <td>${formattedDate}</td>
            <td>${entry.company}</td>
            <td>${entry.title}</td>
            <td>${formatCurrency(entry.amount)} ${increaseText}</td>
            <td>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-primary edit-salary" data-id="${entry.id}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger delete-salary" data-id="${entry.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </td>
        `;
        
        tableBody.appendChild(row);
    });
    
    // Set up action buttons
    document.querySelectorAll('.edit-salary').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            editSalaryEntry(id);
        });
    });
    
    document.querySelectorAll('.delete-salary').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            deleteSalaryEntry(id);
        });
    });
    
    // Update chart
    renderSalaryChart();
}

/**
 * Set up salary form
 */
function setupSalaryForm() {
    const form = document.getElementById('add-salary-form');
    if (!form) return;
    
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const dateInput = document.getElementById('salary-date');
        const companyInput = document.getElementById('salary-company');
        const titleInput = document.getElementById('salary-title');
        const amountInput = document.getElementById('salary-amount');
        const notesInput = document.getElementById('salary-notes');
        const entryIdInput = document.getElementById('salary-entry-id');
        
        if (!dateInput || !companyInput || !titleInput || !amountInput) return;
        
        const date = dateInput.value;
        const company = companyInput.value.trim();
        const title = titleInput.value.trim();
        const amount = parseFloat(amountInput.value);
        const notes = notesInput ? notesInput.value.trim() : '';
        const entryId = entryIdInput ? entryIdInput.value : '';
        
        if (!date || !company || !title || isNaN(amount) || amount <= 0) {
            alert('Please fill in all required fields with valid values.');
            return;
        }
        
        const data = getCurrentData();
        if (!data.salaryHistory) {
            data.salaryHistory = [];
        }
        
        if (entryId) {
            // Edit existing entry
            const index = data.salaryHistory.findIndex(entry => entry.id === entryId);
            if (index !== -1) {
                data.salaryHistory[index] = {
                    ...data.salaryHistory[index],
                    date,
                    company,
                    title,
                    amount,
                    notes,
                    lastModified: new Date().toISOString()
                };
            }
        } else {
            // Add new entry
            data.salaryHistory.push({
                id: generateId(),
                date,
                company,
                title,
                amount,
                notes,
                dateAdded: new Date().toISOString()
            });
        }
        
        saveData(data);
        
        // Reset form and update UI
        form.reset();
        document.getElementById('salary-form-title').textContent = 'Add Salary Entry';
        if (entryIdInput) entryIdInput.value = '';
        
        renderSalaryTable();
        
        // Close modal if open
        const modal = bootstrap.Modal.getInstance(document.getElementById('add-salary-modal'));
        if (modal) {
            modal.hide();
        }
    });
}

/**
 * Edit a salary entry
 * @param {string} id - The ID of the entry to edit
 */
function editSalaryEntry(id) {
    const data = getCurrentData();
    if (!data.salaryHistory) return;
    
    const entry = data.salaryHistory.find(entry => entry.id === id);
    if (!entry) return;
    
    // Fill form with entry data
    const dateInput = document.getElementById('salary-date');
    const companyInput = document.getElementById('salary-company');
    const titleInput = document.getElementById('salary-title');
    const amountInput = document.getElementById('salary-amount');
    const notesInput = document.getElementById('salary-notes');
    const entryIdInput = document.getElementById('salary-entry-id');
    
    if (!dateInput || !companyInput || !titleInput || !amountInput || !entryIdInput) return;
    
    // Format date for input (YYYY-MM)
    const dateObj = new Date(entry.date);
    const formattedDate = `${dateObj.getFullYear()}-${String(dateObj.getMonth() + 1).padStart(2, '0')}`;
    
    dateInput.value = formattedDate;
    companyInput.value = entry.company;
    titleInput.value = entry.title;
    amountInput.value = entry.amount;
    if (notesInput) notesInput.value = entry.notes || '';
    entryIdInput.value = entry.id;
    
    // Update form title
    document.getElementById('salary-form-title').textContent = 'Edit Salary Entry';
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('add-salary-modal'));
    modal.show();
}

/**
 * Delete a salary entry
 * @param {string} id - The ID of the entry to delete
 */
function deleteSalaryEntry(id) {
    if (!confirm('Are you sure you want to delete this salary entry?')) {
        return;
    }
    
    const data = getCurrentData();
    if (!data.salaryHistory) return;
    
    // Find and remove the entry
    const index = data.salaryHistory.findIndex(entry => entry.id === id);
    if (index !== -1) {
        data.salaryHistory.splice(index, 1);
        saveData(data);
        renderSalaryTable();
    }
} 

----- utils.js -----
/**
 * Utility Module
 * Provides helper functions used across modules
 */

/**
 * Format a number as currency (GBP)
 * @param {number} value - The value to format
 * @returns {string} Formatted currency string
 */
export function formatCurrency(value) {
    return new Intl.NumberFormat('en-GB', {
        style: 'currency',
        currency: 'GBP',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).format(value);
}

/**
 * Calculate percentage change between two values
 * @param {number} oldValue - The original value
 * @param {number} newValue - The new value
 * @returns {number} Percentage change
 */
export function calculatePercentChange(oldValue, newValue) {
    if (oldValue === 0) return newValue > 0 ? 100 : 0;
    return ((newValue - oldValue) / Math.abs(oldValue)) * 100;
}

/**
 * Format a date string (YYYY-MM) to a readable format
 * @param {string} dateString - The date string in YYYY-MM format
 * @returns {string} Formatted date (e.g., "Jan 2023")
 */
export function formatDateString(dateString) {
    const [year, month] = dateString.split('-');
    const date = new Date(parseInt(year), parseInt(month) - 1);
    return date.toLocaleDateString('en-GB', { month: 'short', year: 'numeric' });
}

/**
 * Get random color with specific opacity
 * @param {number} opacity - The opacity value (0-1)
 * @returns {string} RGBA color string
 */
export function getRandomColor(opacity = 0.7) {
    const r = Math.floor(Math.random() * 255);
    const g = Math.floor(Math.random() * 255);
    const b = Math.floor(Math.random() * 255);
    return `rgba(${r}, ${g}, ${b}, ${opacity})`;
} 

----- yearManagerUI.js -----
/**
 * Year Manager UI Module
 * Handles year selection, adding new years, and related functionality
 */
import { getCurrentData, saveData } from './dataService.js';
import { renderFinancialTables } from './financialTablesUI.js';
import { updateDashboardSummary } from './dashboardUI.js';
import { renderDashboardCharts } from './chartsUI.js';

/**
 * Initialize year manager UI
 */
export function initYearManager() {
    populateYearSelect();
    setupYearActions();
}

/**
 * Populate the year selection dropdown
 * @param {string} [selectedYear] - Year to select after populating (optional)
 */
export function populateYearSelect(selectedYear) {
    const data = getCurrentData();
    const yearSelect = document.getElementById('year-select');
    
    if (!yearSelect) return;
    
    // Save current selection if no specific year was requested
    const currentSelection = selectedYear || yearSelect.value;
    
    // Clear existing options
    yearSelect.innerHTML = '';
    
    // Get all years
    let years = [];
    if (data.years) {
        years = Object.keys(data.years).sort().reverse(); // Sort by year descending
    }
    
    // If no years exist, create the current year
    if (years.length === 0) {
        const currentYear = new Date().getFullYear().toString();
        if (!data.years) {
            data.years = {};
        }
        data.years[currentYear] = {
            assets: [],
            liabilities: []
        };
        saveData(data);
        years.push(currentYear);
    }
    
    // Add options for each year
    years.forEach(year => {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        yearSelect.appendChild(option);
    });
    
    // Set selected year (either the previously selected one or the newest)
    if (currentSelection && years.includes(currentSelection)) {
        yearSelect.value = currentSelection;
    } else {
        yearSelect.value = years[0]; // Default to first (most recent) year
    }
    
    // Trigger change event to update UI based on selected year
    const event = new Event('change');
    yearSelect.dispatchEvent(event);
}

/**
 * Set up year selection and add/delete year functionality
 */
function setupYearActions() {
    const yearSelect = document.getElementById('year-select');
    const addYearBtn = document.getElementById('add-year-btn');
    const deleteYearBtn = document.getElementById('delete-year-btn');
    
    if (!yearSelect) return;
    
    // Handle year selection change
    yearSelect.addEventListener('change', function() {
        const selectedYear = this.value;
        
        // Update UI components based on selected year
        renderFinancialTables(selectedYear);
        updateDashboardSummary();
        renderDashboardCharts();
        
        // Update delete button visibility (don't allow deleting the last year)
        if (deleteYearBtn) {
            const data = getCurrentData();
            const yearCount = data.years ? Object.keys(data.years).length : 0;
            deleteYearBtn.disabled = yearCount <= 1;
        }
    });
    
    // Handle add year button
    if (addYearBtn) {
        addYearBtn.addEventListener('click', function() {
            showAddYearModal();
        });
    }
    
    // Handle delete year button
    if (deleteYearBtn) {
        deleteYearBtn.addEventListener('click', function() {
            deleteCurrentYear();
        });
    }
    
    // Initial update of delete button state
    if (deleteYearBtn) {
        const data = getCurrentData();
        const yearCount = data.years ? Object.keys(data.years).length : 0;
        deleteYearBtn.disabled = yearCount <= 1;
    }
}

/**
 * Show the add year modal
 */
function showAddYearModal() {
    // Create modal if it doesn't exist
    let modal = document.getElementById('add-year-modal');
    
    if (!modal) {
        modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'add-year-modal';
        modal.setAttribute('tabindex', '-1');
        modal.setAttribute('aria-labelledby', 'add-year-modal-label');
        modal.setAttribute('aria-hidden', 'true');
        
        modal.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="add-year-modal-label">Add New Year</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="add-year-form">
                            <div class="mb-3">
                                <label for="new-year-input" class="form-label">Year</label>
                                <input type="number" class="form-control" id="new-year-input" min="1900" max="2100" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Copy data from existing year (optional)</label>
                                <select class="form-select" id="copy-from-year-select">
                                    <option value="">No - Start with empty data</option>
                                </select>
                                <div class="form-text">This will copy all assets and liabilities from the selected year.</div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="add-year-submit-btn">Add Year</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Set up submit button
        const submitBtn = document.getElementById('add-year-submit-btn');
        if (submitBtn) {
            submitBtn.addEventListener('click', function() {
                addNewYear();
            });
        }
    }
    
    // Get existing years for the copy-from dropdown
    const data = getCurrentData();
    const copyFromSelect = document.getElementById('copy-from-year-select');
    
    if (copyFromSelect) {
        // Clear existing options except the first one
        while (copyFromSelect.options.length > 1) {
            copyFromSelect.remove(1);
        }
        
        // Add options for each existing year
        if (data.years) {
            const years = Object.keys(data.years).sort().reverse();
            years.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                copyFromSelect.appendChild(option);
            });
        }
    }
    
    // Set default year to current year + 1
    const yearInput = document.getElementById('new-year-input');
    if (yearInput) {
        const currentYear = new Date().getFullYear();
        yearInput.value = currentYear + 1;
        yearInput.min = 1900;
        yearInput.max = currentYear + 100;
    }
    
    // Show the modal
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
}

/**
 * Add a new year to the data
 */
function addNewYear() {
    const yearInput = document.getElementById('new-year-input');
    const copyFromSelect = document.getElementById('copy-from-year-select');
    
    if (!yearInput) return;
    
    const newYear = yearInput.value.trim();
    const copyFromYear = copyFromSelect ? copyFromSelect.value : '';
    
    if (!newYear || isNaN(parseInt(newYear))) {
        alert('Please enter a valid year.');
        return;
    }
    
    const data = getCurrentData();
    
    // Check if year already exists
    if (data.years && data.years[newYear]) {
        alert('This year already exists in your data.');
        return;
    }
    
    // Initialize year data
    if (!data.years) {
        data.years = {};
    }
    
    if (copyFromYear && data.years[copyFromYear]) {
        // Copy from existing year
        const sourceYear = data.years[copyFromYear];
        
        // Deep clone the year data
        data.years[newYear] = JSON.parse(JSON.stringify(sourceYear));
    } else {
        // Create with empty data
        data.years[newYear] = {
            assets: [],
            liabilities: []
        };
    }
    
    // Save and update UI
    saveData(data);
    
    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('add-year-modal'));
    if (modal) {
        modal.hide();
    }
    
    // Update year selector and select the new year
    populateYearSelect(newYear);
}

/**
 * Delete the currently selected year
 */
function deleteCurrentYear() {
    const yearSelect = document.getElementById('year-select');
    if (!yearSelect) return;
    
    const selectedYear = yearSelect.value;
    
    // Confirm deletion
    if (!confirm(`Are you sure you want to delete all data for the year ${selectedYear}? This cannot be undone.`)) {
        return;
    }
    
    const data = getCurrentData();
    
    // Don't allow deleting the last year
    if (!data.years || Object.keys(data.years).length <= 1) {
        alert('You cannot delete the last remaining year. Please add another year first.');
        return;
    }
    
    // Delete the year
    delete data.years[selectedYear];
    saveData(data);
    
    // Update year selector
    populateYearSelect();
}

----- navigation-fix.js -----
/**
 * Navigation Fix Script
 * This is a standalone script to ensure navigation works regardless of other JavaScript
 */

// Enhanced Navigation Fix

// Function to handle navigation
function handleNavigation(targetId) {
    // Get all sections
    const allSections = document.querySelectorAll('main > section');
    
    // Hide all sections with multiple visibility methods
    allSections.forEach(section => {
        section.style.display = 'none';
        section.style.visibility = 'hidden';
        section.style.opacity = '0';
        section.classList.remove('active-section');
        section.classList.add('hidden-section');
    });
    
    // Get the target section
    const targetSection = document.getElementById(targetId);
    
    if (targetSection) {
        // Show the target section with multiple visibility methods
        targetSection.style.display = 'block';
        targetSection.style.visibility = 'visible';
        targetSection.style.opacity = '1';
        targetSection.classList.remove('hidden-section');
        targetSection.classList.add('active-section');
        
        // Update document title to reflect current section
        const sectionTitle = targetId.replace(/-/g, ' ');
        document.title = `Net Worth Tracker - ${sectionTitle.charAt(0).toUpperCase() + sectionTitle.slice(1)}`;
        
        // Scroll to the section
        window.scrollTo({ top: 0, behavior: 'smooth' });
        
        // If showing dashboard, refresh the charts
        if (targetId === 'dashboard' && window.renderDashboardCharts) {
            setTimeout(() => {
                window.renderDashboardCharts();
            }, 100);
        }
        
        // If showing trends section, refresh the trend charts
        if (targetId === 'trends' && window.renderTrendsCharts) {
            // Try multiple times with increasing delays to ensure charts load
            setTimeout(() => {
                window.renderTrendsCharts();
            }, 100);
            
            setTimeout(() => {
                window.renderTrendsCharts();
            }, 500);
            
            setTimeout(() => {
                window.renderTrendsCharts();
            }, 1000);
        }
        
        // Get all navigation links
        const navLinks = document.querySelectorAll('#main-nav a');
        
        // Update active link
        navLinks.forEach(link => {
            if (link.getAttribute('href') === `#${targetId}`) {
                link.classList.add('active');
            } else {
                link.classList.remove('active');
            }
        });
    } else {
        // If target section not found, default to dashboard
        if (targetId !== 'dashboard') {
            handleNavigation('dashboard');
        }
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Handle initial hash if present
    const initialHash = window.location.hash.substring(1) || 'dashboard';
    handleNavigation(initialHash);
    
    // Add click event listeners to navigation links
    const navLinks = document.querySelectorAll('#main-nav a');
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault(); // Prevent default link behavior
            const targetId = link.getAttribute('href').substring(1);
            
            // Update URL hash without triggering the hashchange event
            history.pushState(null, null, `#${targetId}`);
            
            // Handle navigation
            handleNavigation(targetId);
        });
    });
    
    // Listen for popstate (back/forward buttons)
    window.addEventListener('popstate', () => {
        const currentHash = window.location.hash.substring(1) || 'dashboard';
        handleNavigation(currentHash);
    });
    
    // Ensure sections are correctly styled
    const allSections = document.querySelectorAll('main > section');
    allSections.forEach(section => {
        // Ensure all sections have minimum height
        section.style.minHeight = '80vh';
        
        // Initial hide for non-active sections
        if (section.id !== initialHash) {
            section.style.display = 'none';
            section.style.visibility = 'hidden';
            section.style.opacity = '0';
            section.classList.add('hidden-section');
        } else {
            section.classList.add('active-section');
        }
    });
}); 

----- page-fixer.js -----
// Page structure fixer - ensures proper HTML structure for sections

document.addEventListener('DOMContentLoaded', () => {
    // 1. Check and fix section structure
    const main = document.querySelector('main');
    const sections = document.querySelectorAll('section');
    
    if (!main) {
        const newMain = document.createElement('main');
        document.body.appendChild(newMain);
    }
    
    // 2. Ensure all sections have IDs
    sections.forEach((section, index) => {
        if (!section.id) {
            section.id = `section-${index}`;
        }
        
        // Ensure section is a direct child of main
        if (section.parentElement.tagName !== 'MAIN') {
            main.appendChild(section);
        }
    });
    
    // 3. Create fixed navigation handler
    window.forceNavigate = function(targetId) {
        // Hide all sections
        sections.forEach(section => {
            section.style.display = 'none';
            section.classList.add('hidden-section');
            section.classList.remove('active-section');
        });
        
        // Show target section
        const targetSection = document.getElementById(targetId);
        if (targetSection) {
            targetSection.style.display = 'block';
            targetSection.classList.add('active-section');
            targetSection.classList.remove('hidden-section');
            return true;
        } else {
            return false;
        }
    };
    
    // 4. Make sure navigation links exist
    const mainNav = document.getElementById('main-nav');
    if (mainNav) {
        const navLinks = mainNav.querySelectorAll('a');
        
        // Add missing click handlers if needed
        navLinks.forEach(link => {
            const targetId = link.getAttribute('href')?.substring(1);
            if (targetId) {
                // Add emergency click handler
                link.addEventListener('click', function(e) {
                    const success = window.forceNavigate(targetId);
                    if (success) {
                        e.preventDefault();
                    }
                });
            }
        });
    }
});

// Add emergency keyboard navigation
document.addEventListener('keydown', (e) => {
    // Alt+1 = Dashboard, Alt+2 = Assets-Liabilities, Alt+3 = Trends
    if (e.altKey) {
        let targetId = null;
        
        if (e.key === '1') targetId = 'dashboard';
        else if (e.key === '2') targetId = 'assets-liabilities';
        else if (e.key === '3') targetId = 'trends';
        
        if (targetId) {
            window.forceNavigate(targetId);
            e.preventDefault();
        }
    }
}); 

----- uiController.js -----
/**
 * UI Controller Module
 * Handles all UI rendering and updates
 */
import { formatCurrency, calculatePercentChange } from './utils.js';

export class UIController {
    constructor(dataStore) {
        this.dataStore = dataStore;
    }
    
    /**
     * Render the year selector dropdown
     */
    renderYearSelector() {
        const yearSelect = document.getElementById('year-select');
        if (!yearSelect) return;
        
        const years = this.dataStore.getYears();
        
        // Clear current options
        yearSelect.innerHTML = '';
        
        // Add options for each year
        years.forEach(year => {
            const option = document.createElement('option');
            option.value = year;
            option.textContent = year;
            yearSelect.appendChild(option);
        });
        
        // If no years available, disable the select
        if (years.length === 0) {
            yearSelect.disabled = true;
        } else {
            yearSelect.disabled = false;
        }
    }
    
    /**
     * Render the assets and liabilities tables
     */
    renderFinancialTables() {
        const yearSelect = document.getElementById('year-select');
        if (!yearSelect) return;
        
        const selectedYear = yearSelect.value;
        if (!selectedYear) return;
        
        this.renderAssetsTable(selectedYear);
        this.renderLiabilitiesTable(selectedYear);
    }
    
    /**
     * Render the assets table for a specific year
     */
    renderAssetsTable(year) {
        const assetsTableBody = document.querySelector('#assets-table tbody');
        const assetsTotalElement = document.getElementById('assets-total');
        
        if (!assetsTableBody || !assetsTotalElement) return;
        
        // Get assets data
        const assets = this.dataStore.getAssets(year);
        const totalAssets = this.dataStore.getTotalAssets(year);
        
        // Clear current table rows
        assetsTableBody.innerHTML = '';
        
        // If no assets, show empty message
        if (assets.length === 0) {
            const emptyRow = document.createElement('tr');
            emptyRow.innerHTML = `<td colspan="4" class="empty-table">No assets added yet. Click "Add Asset" to get started.</td>`;
            assetsTableBody.appendChild(emptyRow);
        } else {
            // Add row for each asset
            assets.forEach(asset => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${asset.category}</td>
                    <td>${asset.name}</td>
                    <td>${formatCurrency(asset.value)}</td>
                    <td>
                        <button class="action-btn edit-btn" data-id="${asset.id}">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="action-btn delete-btn" data-id="${asset.id}">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>
                `;
                
                assetsTableBody.appendChild(row);
                
                // Add event listeners for edit and delete buttons
                const editBtn = row.querySelector('.edit-btn');
                const deleteBtn = row.querySelector('.delete-btn');
                
                editBtn.addEventListener('click', () => this.showEditAssetModal(year, asset));
                deleteBtn.addEventListener('click', () => this.handleDeleteAsset(year, asset.id));
            });
        }
        
        // Update total
        assetsTotalElement.textContent = formatCurrency(totalAssets);
    }
    
    /**
     * Show modal for editing an asset
     */
    showEditAssetModal(year, asset) {
        const modal = document.getElementById('modal-container');
        const modalBody = document.getElementById('modal-body');
        
        if (!modal || !modalBody) return;
        
        modalBody.innerHTML = `
            <h2>Edit Asset</h2>
            <div class="form-group">
                <label for="edit-asset-category">Category:</label>
                <select id="edit-asset-category">
                    <option value="Properties" ${asset.category === 'Properties' ? 'selected' : ''}>Properties</option>
                    <option value="Retirement Savings" ${asset.category === 'Retirement Savings' ? 'selected' : ''}>Retirement Savings</option>
                    <option value="Investments" ${asset.category === 'Investments' ? 'selected' : ''}>Investments</option>
                    <option value="Cash and Cash Equivalent" ${asset.category === 'Cash and Cash Equivalent' ? 'selected' : ''}>Cash and Cash Equivalent</option>
                    <option value="Other Assets" ${asset.category === 'Other Assets' ? 'selected' : ''}>Other Assets</option>
                </select>
            </div>
            <div class="form-group">
                <label for="edit-asset-name">Item Name:</label>
                <input type="text" id="edit-asset-name" value="${asset.name}" />
            </div>
            <div class="form-group">
                <label for="edit-asset-value">Value (£):</label>
                <input type="number" id="edit-asset-value" min="0" step="0.01" value="${asset.value}" />
            </div>
            <div class="form-actions">
                <button id="cancel-edit-asset" class="cancel-btn">Cancel</button>
                <button id="save-edit-asset" class="save-btn">Save Changes</button>
            </div>
        `;
        
        modal.classList.remove('modal-hidden');
        
        // Set up modal event listeners
        document.getElementById('cancel-edit-asset').addEventListener('click', () => {
            modal.classList.add('modal-hidden');
        });
        
        document.getElementById('save-edit-asset').addEventListener('click', () => {
            const category = document.getElementById('edit-asset-category').value;
            const name = document.getElementById('edit-asset-name').value;
            const valueInput = document.getElementById('edit-asset-value').value;
            const value = parseFloat(valueInput);
            
            if (category && name && !isNaN(value) && value >= 0) {
                this.dataStore.updateAsset(year, asset.id, { category, name, value });
                this.renderFinancialTables();
                this.renderDashboardSummary();
                
                // Trigger chart updates via the event system
                const event = new CustomEvent('dataUpdated');
                document.dispatchEvent(event);
                
                modal.classList.add('modal-hidden');
            } else {
                alert('Please fill all fields with valid values');
            }
        });
    }
    
    /**
     * Handle asset deletion
     */
    handleDeleteAsset(year, assetId) {
        const confirmDelete = confirm('Are you sure you want to delete this asset?');
        
        if (confirmDelete) {
            this.dataStore.removeAsset(year, assetId);
            this.renderFinancialTables();
            this.renderDashboardSummary();
            
            // Trigger chart updates via the event system
            const event = new CustomEvent('dataUpdated');
            document.dispatchEvent(event);
        }
    }
    
    /**
     * Render the liabilities table for a specific year
     */
    renderLiabilitiesTable(year) {
        const liabilitiesTableBody = document.querySelector('#liabilities-table tbody');
        const liabilitiesTotalElement = document.getElementById('liabilities-total');
        
        if (!liabilitiesTableBody || !liabilitiesTotalElement) return;
        
        // Get liabilities data
        const liabilities = this.dataStore.getLiabilities(year);
        const totalLiabilities = this.dataStore.getTotalLiabilities(year);
        
        // Clear current table rows
        liabilitiesTableBody.innerHTML = '';
        
        // If no liabilities, show empty message
        if (liabilities.length === 0) {
            const emptyRow = document.createElement('tr');
            emptyRow.innerHTML = `<td colspan="3" class="empty-table">No liabilities added yet. Click "Add Liability" to get started.</td>`;
            liabilitiesTableBody.appendChild(emptyRow);
        } else {
            // Add row for each liability
            liabilities.forEach(liability => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${liability.category}</td>
                    <td>${formatCurrency(liability.value)}</td>
                    <td>
                        <button class="action-btn edit-btn" data-id="${liability.id}">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="action-btn delete-btn" data-id="${liability.id}">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>
                `;
                
                liabilitiesTableBody.appendChild(row);
                
                // Add event listeners for edit and delete buttons
                const editBtn = row.querySelector('.edit-btn');
                const deleteBtn = row.querySelector('.delete-btn');
                
                editBtn.addEventListener('click', () => this.showEditLiabilityModal(year, liability));
                deleteBtn.addEventListener('click', () => this.handleDeleteLiability(year, liability.id));
            });
        }
        
        // Update total
        liabilitiesTotalElement.textContent = formatCurrency(totalLiabilities);
    }
    
    /**
     * Show modal for editing a liability
     */
    showEditLiabilityModal(year, liability) {
        const modal = document.getElementById('modal-container');
        const modalBody = document.getElementById('modal-body');
        
        if (!modal || !modalBody) return;
        
        modalBody.innerHTML = `
            <h2>Edit Liability</h2>
            <div class="form-group">
                <label for="edit-liability-category">Category:</label>
                <select id="edit-liability-category">
                    <option value="Mortgages" ${liability.category === 'Mortgages' ? 'selected' : ''}>Mortgages</option>
                    <option value="Car loans" ${liability.category === 'Car loans' ? 'selected' : ''}>Car loans</option>
                    <option value="Student loans" ${liability.category === 'Student loans' ? 'selected' : ''}>Student loans</option>
                    <option value="Credit Card Debt" ${liability.category === 'Credit Card Debt' ? 'selected' : ''}>Credit Card Debt</option>
                    <option value="Personal Loans" ${liability.category === 'Personal Loans' ? 'selected' : ''}>Personal Loans</option>
                    <option value="Other Debts" ${liability.category === 'Other Debts' ? 'selected' : ''}>Other Debts</option>
                </select>
            </div>
            <div class="form-group">
                <label for="edit-liability-value">Value (£):</label>
                <input type="number" id="edit-liability-value" min="0" step="0.01" value="${liability.value}" />
            </div>
            <div class="form-actions">
                <button id="cancel-edit-liability" class="cancel-btn">Cancel</button>
                <button id="save-edit-liability" class="save-btn">Save Changes</button>
            </div>
        `;
        
        modal.classList.remove('modal-hidden');
        
        // Set up modal event listeners
        document.getElementById('cancel-edit-liability').addEventListener('click', () => {
            modal.classList.add('modal-hidden');
        });
        
        document.getElementById('save-edit-liability').addEventListener('click', () => {
            const category = document.getElementById('edit-liability-category').value;
            const valueInput = document.getElementById('edit-liability-value').value;
            const value = parseFloat(valueInput);
            
            if (category && !isNaN(value) && value >= 0) {
                this.dataStore.updateLiability(year, liability.id, { category, value });
                this.renderFinancialTables();
                this.renderDashboardSummary();
                
                // Trigger chart updates via the event system
                const event = new CustomEvent('dataUpdated');
                document.dispatchEvent(event);
                
                modal.classList.add('modal-hidden');
            } else {
                alert('Please fill all fields with valid values');
            }
        });
    }
    
    /**
     * Handle liability deletion
     */
    handleDeleteLiability(year, liabilityId) {
        const confirmDelete = confirm('Are you sure you want to delete this liability?');
        
        if (confirmDelete) {
            this.dataStore.removeLiability(year, liabilityId);
            this.renderFinancialTables();
            this.renderDashboardSummary();
            
            // Trigger chart updates via the event system
            const event = new CustomEvent('dataUpdated');
            document.dispatchEvent(event);
        }
    }
    
    /**
     * Render the dashboard summary cards
     */
    renderDashboardSummary() {
        const years = this.dataStore.getYears();
        if (years.length === 0) return;
        
        const currentYear = years[0]; // Most recent year
        
        // Get summary data
        const netWorth = this.dataStore.getNetWorth(currentYear);
        const totalAssets = this.dataStore.getTotalAssets(currentYear);
        const totalLiabilities = this.dataStore.getTotalLiabilities(currentYear);
        const debtToAssetRatio = this.dataStore.getDebtToAssetRatio(currentYear);
        
        // Calculate year-over-year change if previous year exists
        let netWorthChange = 0;
        let changeText = '';
        
        if (years.length > 1) {
            const previousYear = years[1];
            const previousNetWorth = this.dataStore.getNetWorth(previousYear);
            
            netWorthChange = calculatePercentChange(previousNetWorth, netWorth);
            
            const changeSymbol = netWorthChange >= 0 ? '+' : '';
            changeText = `${changeSymbol}${netWorthChange.toFixed(1)}% from ${previousYear}`;
        } else {
            changeText = 'No previous data for comparison';
        }
        
        // Update dashboard elements
        document.getElementById('current-net-worth').textContent = formatCurrency(netWorth);
        document.getElementById('net-worth-change').textContent = changeText;
        document.getElementById('total-assets').textContent = formatCurrency(totalAssets);
        document.getElementById('total-liabilities').textContent = formatCurrency(totalLiabilities);
        document.getElementById('debt-asset-ratio').textContent = `${debtToAssetRatio.toFixed(1)}%`;
        
        // Update the debt-to-asset ratio progress bar
        const ratioBar = document.getElementById('debt-ratio-bar');
        if (ratioBar) {
            // Cap at 100% for visual purposes
            const cappedRatio = Math.min(debtToAssetRatio, 100);
            ratioBar.style.width = `${cappedRatio}%`;
            
            // Set color based on ratio
            if (debtToAssetRatio < 30) {
                ratioBar.style.backgroundColor = 'var(--success-color)';
            } else if (debtToAssetRatio < 60) {
                ratioBar.style.backgroundColor = 'var(--warning-color)';
            } else {
                ratioBar.style.backgroundColor = 'var(--danger-color)';
            }
        }
        
        // Update net worth change color
        const changeElement = document.getElementById('net-worth-change');
        if (changeElement) {
            if (netWorthChange > 0) {
                changeElement.style.color = 'var(--success-color)';
            } else if (netWorthChange < 0) {
                changeElement.style.color = 'var(--danger-color)';
            } else {
                changeElement.style.color = 'var(--text-light)';
            }
        }
    }
    
    /**
     * Render the milestones list
     */
    renderMilestones() {
        const milestonesContainer = document.getElementById('milestones-list');
        if (!milestonesContainer) return;
        
        // Update milestone status
        this.dataStore.updateMilestoneStatus();
        
        // Get milestones
        const milestones = this.dataStore.getMilestones();
        
        // Clear current milestones
        milestonesContainer.innerHTML = '';
        
        // If no milestones, show empty message
        if (milestones.length === 0) {
            milestonesContainer.innerHTML = `<p class="empty-list">No milestones added yet. Click "Add Milestone" to get started.</p>`;
            return;
        }
        
        // Add each milestone
        milestones.forEach(milestone => {
            const milestoneElement = document.createElement('div');
            milestoneElement.className = `milestone ${milestone.achieved ? 'achieved' : ''}`;
            
            milestoneElement.innerHTML = `
                <div class="milestone-status">
                    <div class="milestone-icon">${milestone.achieved ? '✓' : '○'}</div>
                </div>
                <div class="milestone-details">
                    <h4>${milestone.name}</h4>
                    <p>${formatCurrency(milestone.amount)}</p>
                </div>
                <div class="milestone-actions">
                    <button class="action-btn delete-milestone-btn" data-id="${milestone.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
            
            milestonesContainer.appendChild(milestoneElement);
            
            // Add event listener for delete button
            const deleteBtn = milestoneElement.querySelector('.delete-milestone-btn');
            deleteBtn.addEventListener('click', () => this.handleDeleteMilestone(milestone.id));
        });
    }
    
    /**
     * Handle delete milestone
     */
    handleDeleteMilestone(milestoneId) {
        const confirmDelete = confirm('Are you sure you want to delete this milestone?');
        
        if (confirmDelete) {
            this.dataStore.removeMilestone(milestoneId);
            this.renderMilestones();
        }
    }
    
    /**
     * Render the salary history table
     */
    renderSalaryTable() {
        const salaryTableBody = document.querySelector('#salary-table tbody');
        if (!salaryTableBody) return;
        
        // Get salary history data
        const salaryEntries = this.dataStore.getSalaryHistory();
        
        // Clear current table rows
        salaryTableBody.innerHTML = '';
        
        // If no salary entries, show empty message
        if (salaryEntries.length === 0) {
            const emptyRow = document.createElement('tr');
            emptyRow.innerHTML = `<td colspan="5" class="empty-table">No salary entries added yet. Click "Add Salary" to get started.</td>`;
            salaryTableBody.appendChild(emptyRow);
        } else {
            // Add row for each salary entry
            salaryEntries.forEach(entry => {
                const row = document.createElement('tr');
                const formattedDate = new Date(entry.date).toLocaleDateString('en-GB', { 
                    month: 'short', 
                    year: 'numeric' 
                });
                
                row.innerHTML = `
                    <td>${formattedDate}</td>
                    <td>${entry.company}</td>
                    <td>${formatCurrency(entry.amount)}</td>
                    <td>${entry.increasePercent.toFixed(1)}%</td>
                    <td>
                        <button class="action-btn edit-btn" data-id="${entry.id}">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="action-btn delete-btn" data-id="${entry.id}">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>
                `;
                
                salaryTableBody.appendChild(row);
                
                // Add event listeners for edit and delete buttons
                const editBtn = row.querySelector('.edit-btn');
                const deleteBtn = row.querySelector('.delete-btn');
                
                editBtn.addEventListener('click', () => this.showEditSalaryModal(entry));
                deleteBtn.addEventListener('click', () => this.handleDeleteSalary(entry.id));
            });
        }
    }
    
    /**
     * Show modal for editing a salary entry
     */
    showEditSalaryModal(entry) {
        const modal = document.getElementById('modal-container');
        const modalBody = document.getElementById('modal-body');
        
        if (!modal || !modalBody) return;
        
        // Format date for input (YYYY-MM)
        const date = new Date(entry.date);
        const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
        
        modalBody.innerHTML = `
            <h2>Edit Salary Entry</h2>
            <div class="form-group">
                <label for="edit-salary-date">Date (Month/Year):</label>
                <input type="month" id="edit-salary-date" value="${formattedDate}" />
            </div>
            <div class="form-group">
                <label for="edit-salary-company">Company:</label>
                <input type="text" id="edit-salary-company" value="${entry.company}" />
            </div>
            <div class="form-group">
                <label for="edit-salary-amount">Salary (£):</label>
                <input type="number" id="edit-salary-amount" min="0" step="0.01" value="${entry.amount}" />
            </div>
            <div class="form-actions">
                <button id="cancel-edit-salary" class="cancel-btn">Cancel</button>
                <button id="save-edit-salary" class="save-btn">Save Changes</button>
            </div>
        `;
        
        modal.classList.remove('modal-hidden');
        modal.classList.add('modal-visible');
        
        // Set up modal event listeners
        document.getElementById('cancel-edit-salary').addEventListener('click', () => {
            modal.classList.add('modal-hidden');
            modal.classList.remove('modal-visible');
        });
        
        document.getElementById('save-edit-salary').addEventListener('click', () => {
            const dateInput = document.getElementById('edit-salary-date').value;
            const company = document.getElementById('edit-salary-company').value;
            const amountInput = document.getElementById('edit-salary-amount').value;
            const amount = parseFloat(amountInput);
            
            if (dateInput && company && !isNaN(amount) && amount >= 0) {
                // Convert the input (YYYY-MM) to a Date object
                const date = new Date(dateInput);
                
                this.dataStore.updateSalaryEntry(entry.id, { date, company, amount });
                this.renderSalaryTable();
                
                // Trigger chart updates
                const event = new CustomEvent('dataUpdated');
                document.dispatchEvent(event);
                
                modal.classList.add('modal-hidden');
                modal.classList.remove('modal-visible');
            } else {
                alert('Please fill all fields with valid values');
            }
        });
    }
    
    /**
     * Handle salary entry deletion
     */
    handleDeleteSalary(entryId) {
        const confirmDelete = confirm('Are you sure you want to delete this salary entry?');
        
        if (confirmDelete) {
            this.dataStore.removeSalaryEntry(entryId);
            this.renderSalaryTable();
            
            // Trigger chart updates
            const event = new CustomEvent('dataUpdated');
            document.dispatchEvent(event);
        }
    }
} 

----- utils.js -----
/**
 * Utility functions for the Net Worth Tracker
 */

/**
 * Format a number as currency (GBP)
 * @param {number} value - The value to format
 * @returns {string} Formatted currency string
 */
export function formatCurrency(value) {
    // Format as GBP with 2 decimal places
    return new Intl.NumberFormat('en-GB', {
        style: 'currency',
        currency: 'GBP',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).format(value);
}

/**
 * Calculate percentage change between two values
 * @param {number} oldValue - The original value
 * @param {number} newValue - The new value
 * @returns {number} Percentage change
 */
export function calculatePercentChange(oldValue, newValue) {
    if (oldValue === 0) {
        return newValue > 0 ? 100 : newValue < 0 ? -100 : 0;
    }
    
    return ((newValue - oldValue) / Math.abs(oldValue)) * 100;
}

/**
 * Generate a random hex color
 * @returns {string} Hex color code
 */
export function randomColor() {
    return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');
}

/**
 * Truncate a string if it exceeds a certain length
 * @param {string} str - String to truncate
 * @param {number} maxLength - Maximum length
 * @returns {string} Truncated string
 */
export function truncateString(str, maxLength) {
    if (str.length <= maxLength) return str;
    return str.slice(0, maxLength) + '...';
}

/**
 * Get a friendly date format
 * @param {Date|string|number} date - Date to format
 * @returns {string} Formatted date
 */
export function formatDate(date) {
    const d = new Date(date);
    return d.toLocaleDateString('en-GB', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
}

/**
 * Debounce a function to prevent rapid firing
 * @param {Function} func - Function to debounce
 * @param {number} wait - Milliseconds to wait
 * @returns {Function} Debounced function
 */
export function debounce(func, wait) {
    let timeout;
    
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

/**
 * Deep clone an object
 * @param {Object} obj - Object to clone
 * @returns {Object} Cloned object
 */
export function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}

/**
 * Calculate compound growth over years
 * @param {number} principal - Starting amount
 * @param {number} rate - Annual growth rate (as decimal, e.g., 0.07 for 7%)
 * @param {number} years - Number of years
 * @returns {number} Final amount after compound growth
 */
export function calculateCompoundGrowth(principal, rate, years) {
    return principal * Math.pow(1 + rate, years);
} 

----- README.md -----
# Net Worth Tracker

A simple yet powerful web application to track your net worth over time, built using vanilla HTML, CSS, and JavaScript.

## Features

- **Net Worth Tracking:** Track your assets and liabilities by year.
- **Data Visualization:** See your financial progress with dynamic charts.
- **Asset Diversity:** Visualize your asset allocation with a pie chart.
- **Growth Metrics:** Track year-over-year growth percentages.
- **Debt-to-Asset Ratio:** Monitor your financial health with debt-to-asset ratio tracking.
- **Milestone Tracking:** Set and achieve net worth goals.
- **Market Benchmarking:** Compare your growth to market benchmarks.
- **Offline Data Storage:** All data is stored locally in your browser.

## Getting Started

### Installation

1. Clone or download this repository
2. Open `index.html` in your web browser

No server setup or installation required - this application runs entirely in your browser.

### How to Use

1. **Add a Year:** Start by adding a financial year to track. The current year will be added by default.
2. **Add Assets:** Input your assets with category, name, and value.
3. **Add Liabilities:** Enter your debts and other liabilities.
4. **Track Progress:** View your financial progress through various charts and metrics.
5. **Set Milestones:** Create financial goals and track your progress towards achieving them.

## Data Management

- All data is stored securely in your browser's local storage.
- Use the export feature to back up your data.
- Import previously exported data to restore your information.

## Browser Compatibility

This application works with all modern browsers including:
- Chrome
- Firefox
- Safari
- Edge

## Privacy

Your financial data never leaves your computer - everything is stored locally in your browser.

## License

This project is open source and available under the MIT License.

## Contributions

Contributions, issues, and feature requests are welcome! 

